/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var traduccion = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,6],$V2=[1,7],$V3=[1,8],$V4=[1,16],$V5=[1,17],$V6=[1,19],$V7=[1,20],$V8=[1,29],$V9=[1,30],$Va=[1,23],$Vb=[1,24],$Vc=[1,25],$Vd=[1,26],$Ve=[1,27],$Vf=[1,28],$Vg=[2,5,9,10,11,19,21,23,26,57,58,63,68,69,70,71,73,76],$Vh=[1,41],$Vi=[1,50],$Vj=[1,46],$Vk=[1,47],$Vl=[1,48],$Vm=[1,51],$Vn=[1,52],$Vo=[1,53],$Vp=[1,57],$Vq=[1,58],$Vr=[1,59],$Vs=[1,69],$Vt=[1,70],$Vu=[1,71],$Vv=[1,72],$Vw=[1,73],$Vx=[1,74],$Vy=[1,75],$Vz=[1,76],$VA=[1,77],$VB=[1,78],$VC=[1,79],$VD=[1,80],$VE=[1,81],$VF=[1,82],$VG=[20,25,34,35,36,37,38,39,42,43,44,45,46,47,48,49],$VH=[2,5,9,10,11,19,21,23,24,26,29,35,50,52,53,54,57,58,63,68,69,70,71,73,76],$VI=[20,25,34,35,42,43,44,45,46,47,48,49],$VJ=[20,25,48,49],$VK=[20,30],$VL=[20,25,42,43,44,45,46,47,48,49],$VM=[20,25,46,47,48,49];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion_variables":7,"declaracion_arreglos":8,"declaracion_funciones":9,"declaracion_types":10,"asignacion":11,"if":12,"while":13,"do_while":14,"switch":15,"for_normal":16,"for_in":17,"for_of":18,"BREAK":19,";":20,"CONTINUE":21,"sentencia_return":22,"GRAFICAR":23,"(":24,")":25,"PRINT":26,"expresion":27,"tipo_restriccion":28,"IDENTIFICADOR":29,"=":30,":":31,"tipo_dato":32,"lista_dimensiones":33,"+":34,"-":35,"*":36,"/":37,"%":38,"**":39,"++":40,"--":41,"<":42,">":43,"<=":44,">=":45,"!=":46,"==":47,"||":48,"&&":49,"!":50,"dato_valor":51,"ENTERO":52,"DECIMAL":53,"CADENA":54,"llamada":55,"parametros":56,"LET":57,"CONST":58,"NUMBER":59,"STRING":60,"VOID":61,"BOOLEAN":62,"IF":63,"statement":64,"else":65,"ELSE":66,"{":67,"}":68,"WHILE":69,"DO":70,"SWITCH":71,"cases":72,"FOR":73,"IN":74,"OF":75,"RETURN":76,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"declaracion_funciones",10:"declaracion_types",11:"asignacion",19:"BREAK",20:";",21:"CONTINUE",23:"GRAFICAR",24:"(",25:")",26:"PRINT",29:"IDENTIFICADOR",30:"=",31:":",33:"lista_dimensiones",34:"+",35:"-",36:"*",37:"/",38:"%",39:"**",40:"++",41:"--",42:"<",43:">",44:"<=",45:">=",46:"!=",47:"==",48:"||",49:"&&",50:"!",52:"ENTERO",53:"DECIMAL",54:"CADENA",56:"parametros",57:"LET",58:"CONST",59:"NUMBER",60:"STRING",61:"VOID",62:"BOOLEAN",63:"IF",66:"ELSE",67:"{",68:"}",69:"WHILE",70:"DO",71:"SWITCH",72:"cases",73:"FOR",74:"IN",75:"OF",76:"RETURN"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,4],[6,5],[6,1],[7,3],[7,5],[7,5],[7,7],[8,4],[8,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,2],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,1],[51,3],[51,1],[51,1],[51,1],[51,1],[51,1],[55,3],[55,4],[28,1],[28,1],[32,1],[32,1],[32,1],[32,1],[32,1],[12,6],[65,2],[65,2],[65,0],[64,3],[13,5],[14,7],[15,5],[17,8],[18,8],[16,8],[22,2],[22,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 18: case 46: case 52: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 63: case 64:
 this.$ = $$[$0]; 
break;
case 16: case 17: case 66:
 this.$ = $$[$0-1]; 
break;
case 19: case 54:
 this.$ = {
        text: $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0],
        escritura: 0
    }; 
break;
case 20:
 this.$ = {
        text: $$[$0-4] + $$[$0-3] + $$[$0-2].text + $$[$0-1] + $$[$0],
        escritura: 0
    }; 
break;
case 21:
 errores.addError(new nodoError("Sintáctico","Se esperaba una instrucción y se encontró ",this._$.first_line,this._$.first_column,$$[$0])); this.$ = undefined; 
break;
case 22:
 this.$ = {
        text: $$[$0-2] + " " + $$[$0-1] + $$[$0],
        escritura: 0
    };
    tabla_simbolos.push_simbolo(new nodoSimbolo("", $$[$0-1], name_function[name_function.length-1], undefined, undefined, undefined, _$[$0-2].first_line, _$[$0-2].first_column)); 
break;
case 23:
 this.$ = {
        text: $$[$0-4] + " " + $$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1].text + $$[$0],
        valor: $$[$0-1].valor,
        escritura: 0
    }; 
    tabla_simbolos.push_simbolo(new nodoSimbolo("", $$[$0-3], name_function[name_function.length-1], undefined, undefined, $$[$0-1].valor, _$[$0-4].first_line, _$[$0-4].first_column)); 
break;
case 24:
 this.$ = {
        text: $$[$0-4] + " " + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0],
        escritura: 0
    }; 
    tabla_simbolos.push_simbolo(new nodoSimbolo($$[$0-1], $$[$0-3], name_function[name_function.length-1], undefined, undefined, undefined, _$[$0-4].first_line, _$[$0-4].first_column)); 
break;
case 25:
 this.$ = {
        text: $$[$0-6] + " " + $$[$0-5] + $$[$0-4] + $$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1].text + $$[$0],
        valor: $$[$0-1].valor,
        escritura: 0
    }; 
    tabla_simbolos.push_simbolo(new nodoSimbolo($$[$0-3], $$[$0-5], name_function[name_function.length-1], undefined, undefined, $$[$0-1].valor,  _$[$0-6].first_line, _$[$0-6].first_column)); 
break;
case 26:
 this.$ = {
        text: $$[$0-3].text + $$[$0-2] + $$[$0-1].text,
        escritura: 0
    }; 
break;
case 27:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        escritura: 0
    }; 
break;
case 28:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor + $$[$0].valor
    }; 
break;
case 29:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor - $$[$0].valor
    }; 
break;
case 30:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor * $$[$0].valor
    }; 
break;
case 31:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor / $$[$0].valor
    }; 
break;
case 32:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor % $$[$0].valor
    }; 
break;
case 33:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor ** $$[$0].valor
    }; 
break;
case 34:
 this.$ = {
        text: $$[$0-1] + $$[$0],
        valor: $$[$0-1].valor++
    }; 
break;
case 35:
 this.$ = {
        text: $$[$0-1] + $$[$0],
        valor: $$[$0-1].valor--
    }; 
break;
case 36:
 this.$ = {
        text: $$[$0-1] + $$[$0].text,
        valor: -$$[$0].valor
    }; 
break;
case 37:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor < $$[$0].valor
    }; 
break;
case 38:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor > $$[$0].valor
    }; 
break;
case 39:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor <= $$[$0].valor
    }; 
break;
case 40:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor >= $$[$0].valor
    }; 
break;
case 41:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor != $$[$0].valor
    }; 
break;
case 42:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor === $$[$0].valor
    }; 
break;
case 43: case 44:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text
    }; 
break;
case 45:
 this.$ = {
        text: $$[$0-1] + $$[$0].text
    }; 
break;
case 47:
 this.$ = {
        text: $$[$0-2] + $$[$0-1].text + $$[$0]
    }; 
break;
case 48: case 49:
 this.$ = {
        text: $$[$0],
        valor: +$$[$0]
    }; 
break;
case 50: case 51:
 this.$ = {
        text: $$[$0],
        valor: $$[$0]
    }; 
break;
case 53:
 this.$ = {
        text: $$[$0-2] + $$[$0-1] + $$[$0],
        escritura: 0
    }; 
break;
case 62:
         
        this.$ = {
            text: $$[$0-5] + $$[$0-4] + $$[$0-3].text + $$[$0-2],
            escritura: 2,
            instr: $$[$0-1],
            els: $$[$0]
        };
     
break;
case 65:
 this.$ = {
        text: ""
    }; 
break;
case 67: case 69:
 this.$ = {
        text: $$[$0-4] + $$[$0-3] + $$[$0-2].text + $$[$0-1],
        escritura: 1,
        instr: $$[$0]
    }; 
break;
case 68:
 this.$ = {        
        text: $$[$0-4] + $$[$0-3] + $$[$0-2].text + $$[$0-1],
        escritura: 3,
        instr: $$[$0-5]
    }; 
break;
case 70:
 this.$ = {
        text: $$[$0-7] + $$[$0-6] + $$[$0-5] + " " + $$[$0-4] + " " + $$[$0-3] + " " + $$[$0-2] + $$[$0-1],
        escritura: 1,
        instr: $$[$0]
    }; 
break;
case 71:
 this.$ = {
        text: $$[$0-7] + " " + $$[$0-6] + $$[$0-5] + " " + $$[$0-4] + " " + $$[$0-3] + " " + $$[$0-2] + $$[$0-1],
        escritura: 1,
        instr: $$[$0]
    }; 
break;
case 72:
 this.$ = {
        text: $$[$0-7] + $$[$0-6] + $$[$0-5].text + " " + $$[$0-4].text + $$[$0-3] + $$[$0-2].text + $$[$0-1],
        escritura: 1,
        instr: $$[$0]
    }; 
break;
case 73:
 this.$ = {
        text: $$[$0-1] + " " + $$[$0],
        escritura: 0
    }; 
break;
case 74:
  this.$ = {
        text: $$[$0-2] + " " + $$[$0-1].text + $$[$0],
        escritura: 0
    }; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:$V1,10:$V2,11:$V3,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V4,21:$V5,22:18,23:$V6,26:$V7,28:22,57:$V8,58:$V9,63:$Va,69:$Vb,70:$Vc,71:$Vd,73:$Ve,76:$Vf},{1:[3]},{2:$V0,5:[1,31],6:32,7:4,8:5,9:$V1,10:$V2,11:$V3,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V4,21:$V5,22:18,23:$V6,26:$V7,28:22,57:$V8,58:$V9,63:$Va,69:$Vb,70:$Vc,71:$Vd,73:$Ve,76:$Vf},o($Vg,[2,3]),o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,14]),o($Vg,[2,15]),{20:[1,33]},{20:[1,34]},o($Vg,[2,18]),{24:[1,35]},{24:[1,36]},o($Vg,[2,21]),{29:[1,37]},{24:[1,38]},{24:[1,39]},{64:40,67:$Vh},{24:[1,42]},{24:[1,43]},{20:[1,44],24:$Vi,27:45,29:$Vj,35:$Vk,50:$Vl,51:49,52:$Vm,53:$Vn,54:$Vo,55:54},{29:[2,55]},{29:[2,56]},{1:[2,1]},o($Vg,[2,2]),o($Vg,[2,16]),o($Vg,[2,17]),{25:[1,55]},{24:$Vi,27:56,29:$Vj,35:$Vk,50:$Vl,51:49,52:$Vm,53:$Vn,54:$Vo,55:54},{20:$Vp,30:$Vq,31:$Vr,33:[1,60]},{24:$Vi,27:61,29:$Vj,35:$Vk,50:$Vl,51:49,52:$Vm,53:$Vn,54:$Vo,55:54},{24:$Vi,27:62,29:$Vj,35:$Vk,50:$Vl,51:49,52:$Vm,53:$Vn,54:$Vo,55:54},{69:[1,63]},{2:$V0,4:64,6:3,7:4,8:5,9:$V1,10:$V2,11:$V3,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V4,21:$V5,22:18,23:$V6,26:$V7,28:22,57:$V8,58:$V9,63:$Va,69:$Vb,70:$Vc,71:$Vd,73:$Ve,76:$Vf},{24:$Vi,27:65,29:$Vj,35:$Vk,50:$Vl,51:49,52:$Vm,53:$Vn,54:$Vo,55:54},{7:66,28:67,57:$V8,58:$V9},o($Vg,[2,73]),{20:[1,68],34:$Vs,35:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF},o($VG,[2,51],{24:[1,85],40:[1,83],41:[1,84]}),{24:$Vi,27:86,29:$Vj,35:$Vk,50:$Vl,51:49,52:$Vm,53:$Vn,54:$Vo,55:54},{24:$Vi,27:87,29:$Vj,35:$Vk,50:$Vl,51:49,52:$Vm,53:$Vn,54:$Vo,55:54},o($VG,[2,46]),{24:$Vi,27:88,29:$Vj,35:$Vk,50:$Vl,51:49,52:$Vm,53:$Vn,54:$Vo,55:54},o($VG,[2,48]),o($VG,[2,49]),o($VG,[2,50]),o($VG,[2,52]),{20:[1,89]},{25:[1,90],34:$Vs,35:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF},o($VH,[2,22]),{24:$Vi,27:91,29:$Vj,35:$Vk,50:$Vl,51:49,52:$Vm,53:$Vn,54:$Vo,55:54},{29:[1,97],32:92,59:[1,93],60:[1,94],61:[1,95],62:[1,96]},o($Vg,[2,27],{20:[1,98]}),{25:[1,99],34:$Vs,35:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF},{25:[1,100],34:$Vs,35:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF},{24:[1,101]},{2:$V0,6:32,7:4,8:5,9:$V1,10:$V2,11:$V3,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V4,21:$V5,22:18,23:$V6,26:$V7,28:22,57:$V8,58:$V9,63:$Va,68:[1,102],69:$Vb,70:$Vc,71:$Vd,73:$Ve,76:$Vf},{25:[1,103],34:$Vs,35:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF},{24:$Vi,27:104,29:$Vj,35:$Vk,50:$Vl,51:49,52:$Vm,53:$Vn,54:$Vo,55:54},{29:[1,105]},o($Vg,[2,74]),{24:$Vi,27:106,29:$Vj,35:$Vk,50:$Vl,51:49,52:$Vm,53:$Vn,54:$Vo,55:54},{24:$Vi,27:107,29:$Vj,35:$Vk,50:$Vl,51:49,52:$Vm,53:$Vn,54:$Vo,55:54},{24:$Vi,27:108,29:$Vj,35:$Vk,50:$Vl,51:49,52:$Vm,53:$Vn,54:$Vo,55:54},{24:$Vi,27:109,29:$Vj,35:$Vk,50:$Vl,51:49,52:$Vm,53:$Vn,54:$Vo,55:54},{24:$Vi,27:110,29:$Vj,35:$Vk,50:$Vl,51:49,52:$Vm,53:$Vn,54:$Vo,55:54},{24:$Vi,27:111,29:$Vj,35:$Vk,50:$Vl,51:49,52:$Vm,53:$Vn,54:$Vo,55:54},{24:$Vi,27:112,29:$Vj,35:$Vk,50:$Vl,51:49,52:$Vm,53:$Vn,54:$Vo,55:54},{24:$Vi,27:113,29:$Vj,35:$Vk,50:$Vl,51:49,52:$Vm,53:$Vn,54:$Vo,55:54},{24:$Vi,27:114,29:$Vj,35:$Vk,50:$Vl,51:49,52:$Vm,53:$Vn,54:$Vo,55:54},{24:$Vi,27:115,29:$Vj,35:$Vk,50:$Vl,51:49,52:$Vm,53:$Vn,54:$Vo,55:54},{24:$Vi,27:116,29:$Vj,35:$Vk,50:$Vl,51:49,52:$Vm,53:$Vn,54:$Vo,55:54},{24:$Vi,27:117,29:$Vj,35:$Vk,50:$Vl,51:49,52:$Vm,53:$Vn,54:$Vo,55:54},{24:$Vi,27:118,29:$Vj,35:$Vk,50:$Vl,51:49,52:$Vm,53:$Vn,54:$Vo,55:54},{24:$Vi,27:119,29:$Vj,35:$Vk,50:$Vl,51:49,52:$Vm,53:$Vn,54:$Vo,55:54},o($VG,[2,34]),o($VG,[2,35]),{25:[1,120],56:[1,121]},o($VI,[2,36],{36:$Vu,37:$Vv,38:$Vw,39:$Vx}),o($VJ,[2,45],{34:$Vs,35:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD}),{25:[1,122],34:$Vs,35:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF},o($Vg,[2,19]),{20:[1,123]},{20:[1,124],34:$Vs,35:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF},{20:[1,125],30:[1,126]},o($VK,[2,57]),o($VK,[2,58]),o($VK,[2,59]),o($VK,[2,60]),o($VK,[2,61]),o($Vg,[2,26]),{64:127,67:$Vh},{64:128,67:$Vh},{24:$Vi,27:129,29:$Vj,35:$Vk,50:$Vl,51:49,52:$Vm,53:$Vn,54:$Vo,55:54},o([2,5,9,10,11,19,21,23,26,57,58,63,66,68,69,70,71,73,76],[2,66]),{72:[1,130]},{20:[1,131],34:$Vs,35:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF},{20:$Vp,30:$Vq,31:$Vr,74:[1,132],75:[1,133]},o($VI,[2,28],{36:$Vu,37:$Vv,38:$Vw,39:$Vx}),o($VI,[2,29],{36:$Vu,37:$Vv,38:$Vw,39:$Vx}),o($VG,[2,30]),o($VG,[2,31]),o($VG,[2,32]),o($VG,[2,33]),o($VL,[2,37],{34:$Vs,35:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx}),o($VL,[2,38],{34:$Vs,35:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx}),o($VL,[2,39],{34:$Vs,35:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx}),o($VL,[2,40],{34:$Vs,35:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx}),o($VM,[2,41],{34:$Vs,35:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB}),o($VM,[2,42],{34:$Vs,35:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB}),o([20,25,48],[2,43],{34:$Vs,35:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,49:$VF}),o($VJ,[2,44],{34:$Vs,35:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD}),o($VG,[2,53]),{25:[1,134]},o($VG,[2,47]),o($Vg,[2,20]),o($VH,[2,23]),o($VH,[2,24]),{24:$Vi,27:135,29:$Vj,35:$Vk,50:$Vl,51:49,52:$Vm,53:$Vn,54:$Vo,55:54},o($Vg,[2,65],{65:136,66:[1,137]}),o($Vg,[2,67]),{25:[1,138],34:$Vs,35:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF},o($Vg,[2,69]),{24:$Vi,27:139,29:$Vj,35:$Vk,50:$Vl,51:49,52:$Vm,53:$Vn,54:$Vo,55:54},{29:[1,140]},{29:[1,141]},o($VG,[2,54]),{20:[1,142],34:$Vs,35:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF},o($Vg,[2,62]),{12:143,63:$Va,64:144,67:$Vh},{20:[1,145]},{25:[1,146],34:$Vs,35:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF},{25:[1,147]},{25:[1,148]},o($VH,[2,25]),o($Vg,[2,63]),o($Vg,[2,64]),o($Vg,[2,68]),{64:149,67:$Vh},{64:150,67:$Vh},{64:151,67:$Vh},o($Vg,[2,72]),o($Vg,[2,70]),o($Vg,[2,71])],
defaultActions: {29:[2,55],30:[2,56],31:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { nodoError } = require('../js/error/error');
    const { errores } = require('../js/error/errores');

    const { tipo } = require('../js/abstract/valores');
    const { nodoSimbolo } = require('../js/tabla_simbolos/nodosimbolo');
    const { tabla_simbolos } = require('../js/tabla_simbolos/tablasimbolos');

    let name_function = new Array;
    name_function.push("Global");

    const { aritmetica, operacion_aritmetica } = require('../js/expresion/aritmetica');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* EVITAR ESPACIOS EN BLANCO */
break;
case 1:/* IGNORAR COMENTARIO */
break;
case 2:/* IGNORAR COMENTARIO */
break;
case 3:return 'SALTOLINEA'
break;
case 4:return 'TABULADOR'
break;
case 5:return 'RETORNOCARRO'
break;
case 6:return 'BARRAINVERTIDA'
break;
case 7:return 'COMILLASIMPLE'
break;
case 8:return 'COMILLADOBLE'
break;
case 9: /*yy_.yytext = yy_.yytext.substr( 1 , yy_.yyleng-2 );*/ return 54; 
break;
case 10: /*yy_.yytext = yy_.yytext.substr( 1 , yy_.yyleng-2 );*/ return 54; 
break;
case 11:return 60
break;
case 12:return 59
break;
case 13:return 62
break;
case 14:return 61
break;
case 15:return 'TYPES'
break;
case 16:return 39
break;
case 17:return 41
break;
case 18:return 40
break;
case 19:return 34
break;
case 20:return 35
break;
case 21:return 36
break;
case 22:return 37
break;
case 23:return 38
break;
case 24:return 45
break;
case 25:return 44
break;
case 26:return 43
break;
case 27:return 42
break;
case 28:return 47
break;
case 29:return 46
break;
case 30:return 49
break;
case 31:return 48
break;
case 32:return 50
break;
case 33:return '?'
break;
case 34:return 63
break;
case 35:return 66
break;
case 36:return 71
break;
case 37:return 'CASE'
break;
case 38:return 'DEFAULT'
break;
case 39:return 69
break;
case 40:return 70
break;
case 41:return 73
break;
case 42:return 74
break;
case 43:return 75
break;
case 44:return 'PUSH'
break;
case 45:return 'POP'
break;
case 46:return 'LENGTH'
break;
case 47:return 57
break;
case 48:return 58
break;
case 49:return 'BEARK'
break;
case 50:return 21
break;
case 51:return 76
break;
case 52:return 'FUNCTION'
break;
case 53:return 26
break;
case 54:return 23
break;
case 55:return 67
break;
case 56:return 68
break;
case 57:return '['
break;
case 58:return ']'
break;
case 59:return 30
break;
case 60:return ','
break;
case 61:return 20
break;
case 62:return 31
break;
case 63:return 24
break;
case 64:return 25
break;
case 65:return '.'
break;
case 66:return 52
break;
case 67:return 53
break;
case 68:return 29
break;
case 69:return 'BOOLEANO'
break;
case 70:return 5
break;
case 71:errores.addError(new nodoError("Lexico","Caracter desconocido",yy_.yylloc.first_line, yy_.yylloc.first_column, yy_.yytext))
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:(\\))/,/^(?:(\\))/,/^(?:(\\))/,/^(?:(\\\\))/,/^(?:(\\'))/,/^(?:(\\"))/,/^(?:(("[^"]*")))/,/^(?:(('[^']*')\/\/.*[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]))/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:types\b)/,/^(?:\*\*)/,/^(?:--)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:function\b)/,/^(?:console\.log\b)/,/^(?:graficar_ts\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:=)/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:([0-9]+))/,/^(?:([0-9]+\.[0-9]+))/,/^(?:(([a-zA-Z_])[a-zA-Z0-9_]*))/,/^(?:{booleano})/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = traduccion;
exports.Parser = traduccion.Parser;
exports.parse = function () { return traduccion.parse.apply(traduccion, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}