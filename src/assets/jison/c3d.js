/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var c3d = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,25],$V1=[1,18],$V2=[1,19],$V3=[1,21],$V4=[1,30],$V5=[1,22],$V6=[1,29],$V7=[1,28],$V8=[1,31],$V9=[1,32],$Va=[1,33],$Vb=[1,34],$Vc=[1,35],$Vd=[1,43],$Ve=[1,44],$Vf=[1,37],$Vg=[1,38],$Vh=[1,39],$Vi=[1,40],$Vj=[1,41],$Vk=[1,42],$Vl=[1,27],$Vm=[2,5,24,25,27,28,30,34,49,52,69,70,71,72,73,75,76,81,86,87,88,91,92,93,96,97],$Vn=[15,16],$Vo=[2,70],$Vp=[2,72],$Vq=[2,73],$Vr=[2,67],$Vs=[1,60],$Vt=[1,59],$Vu=[1,61],$Vv=[1,66],$Vw=[1,64],$Vx=[1,65],$Vy=[13,15,16,29,37,47,48,54,55,56,57,58,59,60,61,62,63,64,65,66,67],$Vz=[1,73],$VA=[1,93],$VB=[1,94],$VC=[1,95],$VD=[1,96],$VE=[1,97],$VF=[1,98],$VG=[1,99],$VH=[1,100],$VI=[1,101],$VJ=[1,102],$VK=[1,103],$VL=[1,104],$VM=[1,105],$VN=[1,106],$VO=[13,29,37,47,48,54,55,56,57,58,59,60,61,62,63,64,65,66,67],$VP=[1,129],$VQ=[1,125],$VR=[1,126],$VS=[1,127],$VT=[1,128],$VU=[1,133],$VV=[29,48],$VW=[13,29,37,47,48,54,55,60,61,62,63,64,65,66,67],$VX=[13,29,37,47,48,66,67],$VY=[2,5,24,25,27,28,30,34,49,52,69,70,71,72,73,75,76,81,84,86,87,88,91,92,93,96,97],$VZ=[1,164],$V_=[1,165],$V$=[13,29,35,45,48,50],$V01=[1,174],$V11=[2,5,24,25,27,28,30,34,49,52,55,68,69,70,71,72,73,75,76,81,86,87,88,91,92,93,96,97],$V21=[13,29,37,47,48,54,55,56,57,58,60,61,62,63,64,65,66,67],$V31=[13,29,37,47,48,60,61,62,63,64,65,66,67],$V41=[13,29,37,47,48,64,65,66,67],$V51=[1,191],$V61=[1,192],$V71=[34,52],$V81=[1,206],$V91=[1,207],$Va1=[13,35,45],$Vb1=[52,91,92],$Vc1=[47,48];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion_variables":7,"declaracion_arreglos":8,"declaracion_funciones":9,"declaracion_types":10,"asignacion":11,"llamada":12,";":13,"dato_valor":14,"++":15,"--":16,"if":17,"while":18,"do_while":19,"switch":20,"for_normal":21,"for_in":22,"for_of":23,"BREAK":24,"CONTINUE":25,"sentencia_return":26,"GRAFICAR":27,"(":28,")":29,"PRINT":30,"expresion":31,"pop_funcion":32,"push_funcion":33,"IDENTIFICADOR":34,"=":35,"tipo_restriccion":36,":":37,"tipo_dato":38,"length_funcion":39,".":40,"LENGTH":41,"POP":42,"PUSH":43,"lista_dimensiones":44,"[":45,"valores_arreglo":46,"]":47,",":48,"TYPE":49,"{":50,"atributos":51,"}":52,"atributo":53,"+":54,"-":55,"*":56,"/":57,"%":58,"**":59,"<":60,">":61,"<=":62,">=":63,"!=":64,"==":65,"||":66,"&&":67,"!":68,"ENTERO":69,"DECIMAL":70,"CADENA":71,"TRUE":72,"FALSE":73,"lista_exp_par":74,"LET":75,"CONST":76,"NUMBER":77,"STRING":78,"VOID":79,"BOOLEAN":80,"IF":81,"statement":82,"else":83,"ELSE":84,"statement_switch":85,"WHILE":86,"DO":87,"SWITCH":88,"cases":89,"case":90,"CASE":91,"DEFAULT":92,"FOR":93,"IN":94,"OF":95,"RETURN":96,"FUNCTION":97,"parametros":98,"parametro":99,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:";",15:"++",16:"--",24:"BREAK",25:"CONTINUE",27:"GRAFICAR",28:"(",29:")",30:"PRINT",34:"IDENTIFICADOR",35:"=",37:":",40:".",41:"LENGTH",42:"POP",43:"PUSH",45:"[",47:"]",48:",",49:"TYPE",50:"{",52:"}",54:"+",55:"-",56:"*",57:"/",58:"%",59:"**",60:"<",61:">",62:"<=",63:">=",64:"!=",65:"==",66:"||",67:"&&",68:"!",69:"ENTERO",70:"DECIMAL",71:"CADENA",72:"TRUE",73:"FALSE",75:"LET",76:"CONST",77:"NUMBER",78:"STRING",79:"VOID",80:"BOOLEAN",81:"IF",84:"ELSE",86:"WHILE",87:"DO",88:"SWITCH",91:"CASE",92:"DEFAULT",93:"FOR",94:"IN",95:"OF",96:"RETURN",97:"FUNCTION"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,3],[6,3],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,4],[6,5],[6,2],[6,2],[6,1],[11,4],[7,5],[7,7],[39,3],[32,5],[33,6],[8,6],[8,10],[8,8],[46,3],[46,1],[44,3],[44,2],[10,7],[51,2],[51,1],[53,4],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,2],[31,2],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,1],[14,3],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[12,3],[12,4],[74,3],[74,1],[36,1],[36,1],[38,1],[38,1],[38,1],[38,1],[38,1],[17,6],[83,2],[83,2],[83,0],[82,3],[82,2],[85,1],[18,5],[19,7],[20,7],[89,2],[89,1],[90,4],[90,3],[22,8],[23,8],[21,8],[21,8],[21,9],[26,2],[26,3],[9,8],[9,7],[98,3],[98,1],[99,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 41: case 95:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 37: case 42: case 77: case 96: case 109:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 7: case 8: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 21: case 62: case 70: case 71: case 72: case 73: case 78: case 79: case 84: case 86: case 87:
 this.$ = $$[$0]; 
break;
case 9: case 24: case 25: case 63:
 this.$ = $$[$0-1]; 
break;
case 10:
 this.$ = {
        nodo: (new aritmetica_unitaria($$[$0-2].nodo, operacion_unitaria.INCREMENTO, $$[$0-2].id, _$[$0-2].first_line, _$[$0-2].first_column)),

        tipo: "incremento",
        expresion: {
            izquierdo: $$[$0-2].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 11:
 this.$ = {
        nodo: (new aritmetica_unitaria($$[$0-2].nodo, operacion_unitaria.DECREMENTO, $$[$0-2].id, _$[$0-2].first_line, _$[$0-2].first_column)),

        tipo: "incremento",
        expresion: {
            izquierdo: $$[$0-2].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 19:
 this.$ = {
        nodo: (new break_(_$[$0-1].first_line, _$[$0-1].first_column)),

        tipo: "break"
    }; 
break;
case 20:
 this.$ = {
        nodo: (new continue_(_$[$0-1].first_line, _$[$0-1].first_column)),
        
        tipo: "continue"
    }; 
break;
case 22:
 this.$ = {
        text: $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0],
        escritura: 0
    }; 
break;
case 23:
 this.$ = {
        nodo: (new print_($$[$0-2].nodo, _$[$0-4].first_line, _$[$0-4].first_column)),

        tipo: "print",
        expresion: $$[$0-2].expresion
    }; 
break;
case 26:
 errores.addError(new nodoError("Sintáctico","Se esperaba una instrucción y se encontró ",this._$.first_line,this._$.first_column,$$[$0])); this.$ = undefined; 
break;
case 27:
 this.$ = {
        nodo: (new asignacion_($$[$0-1].nodo, $$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column)),
        
        
        tipo: "asignar",
        expresion: $$[$0-1].expresion,
        id: $$[$0-3]
    }; 
break;
case 28:
 this.$ = {
        nodo: (new declaracion_($$[$0-1].nodo, $$[$0-3], $$[$0-4], null, _$[$0-4].first_line, _$[$0-4].first_column)),

        tipo: "declaracion_variable",
        restriccion: $$[$0-4],
        id: $$[$0-3]
    }; 
break;
case 29:
 this.$ = {
        nodo: (new declaracion_($$[$0-3].nodo, $$[$0-5], $$[$0-6], $$[$0-1].nodo, _$[$0-6].first_line, _$[$0-6].first_column)),

        tipo: "declaracion_variable",
        restriccion: $$[$0-6],
        id: $$[$0-5],
        expresion: $$[$0-1].expresion
    }; 
break;
case 30:
 this.$ = {
        nodo: (new length_($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column))
    }; 
break;
case 31:
 this.$ = {
        nodo: (new pop_($$[$0-4], _$[$0-4].first_linea, _$[$0-4].first_column))
    }; 
break;
case 32:
 this.$ = {
        nodo: (new push_($$[$0-5], $$[$0-1].nodo, _$[$0-5].first_linea, _$[$0-5].first_column))
    }; 
break;
case 33:
 this.$ = {
        nodo: (new arreglo($$[$0-4], null, _$[$0-5].first_linea, _$[$0-5].first_column, $$[$0-2].dato, $$[$0-5])),

        tipo: "arreglo",
        id:  $$[$0-4]
    };  
break;
case 34:
 this.$ = {
        nodo: (new arreglo($$[$0-8], $$[$0-2], _$[$0-9].first_linea, _$[$0-9].first_column, $$[$0-6].dato, $$[$0-9])),        

        tipo: "arreglo",
        id:  $$[$0-8]
    }; 
break;
case 35:
 this.$ = {
        nodo: (new arreglo($$[$0-6], null , _$[$0-7].first_linea, _$[$0-7].first_column, $$[$0-4].dato, $$[$0-7])),

        tipo: "arreglo",
        id:  $$[$0-6]
    }; 
break;
case 36: case 76: case 108:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 38:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0]
    }; 
break;
case 39:
 this.$ = {
        text: $$[$0-1] + $$[$0]
    }; 
break;
case 40:
 this.$ = {
        text: $$[$0-6] + $$[$0-5] + $$[$0-4],
        escritura: 1,
        instr: $$[$0-2]
    }; 
break;
case 43:
 this.$ = {  
        text: $$[$0-3] + $$[$0-2] + $$[$0-1].dato + $$[$0],
        escritura: 0
    }; 
break;
case 44:
 this.$ = {
        nodo: (new suma($$[$0-2].nodo, $$[$0].nodo, _$[$0-2].first_line, _$[$0-2].first_column)),

        expresion: {
            izquierdo: $$[$0-2].expresion,
            derecho: $$[$0].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 45:
 this.$ = {
        nodo: (new resta($$[$0-2].nodo, $$[$0].nodo, _$[$0-2].first_line, _$[$0-2].first_column)),

        expresion: {
            izquierdo: $$[$0-2].expresion,
            derecho: $$[$0].expresion,
            operador: $$[$0-1]
        }
        
    }; 
break;
case 46:
 this.$ = {
        nodo: (new  multiplicacion($$[$0-2].nodo, $$[$0].nodo, _$[$0-2].first_line, _$[$0-2].first_column)),

        expresion: {
            izquierdo: $$[$0-2].expresion,
            derecho: $$[$0].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 47:
 this.$ = {
        nodo: (new dividir($$[$0-2].nodo, $$[$0].nodo, _$[$0-2].first_line, _$[$0-2].first_column)),

        expresion: {
            izquierdo: $$[$0-2].expresion,
            derecho: $$[$0].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 48:
 this.$ = {
        nodo: (new modulo($$[$0-2].nodo, $$[$0].nodo, _$[$0-2].first_line, _$[$0-2].first_column)),

        expresion: {
            izquierdo: $$[$0-2].expresion,
            derecho: $$[$0].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 49:
 this.$ = {
        nodo: (new aritmetica($$[$0-2].nodo, $$[$0].nodo, operacion_aritmetica.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column)),

        expresion: {
            izquierdo: $$[$0-2].expresion,
            derecho: $$[$0].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 50:
 this.$ = {
        nodo: (new aritmetica_unitaria($$[$0-1].nodo, operacion_unitaria.INCREMENTO, $$[$0-1].id, _$[$0-1].first_line, _$[$0-1].first_column)),

        expresion: {
            izquierdo: $$[$0-1].expresion,
            operador: $$[$0]
        }
    }; 
break;
case 51:
 this.$ = {
        nodo: (new aritmetica_unitaria($$[$0-1].nodo, operacion_unitaria.DECREMENTO, $$[$0-1].id, _$[$0-1].first_line, _$[$0-1].first_column)),

        expresion: {
            izquierdo: $$[$0-1].expresion,
            operador: $$[$0]
        }
    }; 
break;
case 52:
 this.$ = {
        nodo: (new aritmetica($$[$0].nodo, null, operacion_aritmetica.NEGAR, _$[$0-1].first_line, _$[$0-1].first_column)),

        expresion: {
            izquierdo: $$[$0].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 53:
 this.$ = {
        nodo: (new relacionales($$[$0-2].nodo, $$[$0].nodo, oper_rel.MENOR, _$[$0-2].first_line, _$[$0-2].first_column)),

        expresion: {
            izquierdo: $$[$0-2].expresion,
            derecho: $$[$0].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 54:
 this.$ = {
        nodo: (new relacionales($$[$0-2].nodo, $$[$0].nodo, oper_rel.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column)),

        expresion: {
            izquierdo: $$[$0-2].expresion,
            derecho: $$[$0].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 55:
 this.$ = {
        nodo: (new relacionales($$[$0-2].nodo, $$[$0].nodo, oper_rel.MENOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column)),

        expresion: {
            izquierdo: $$[$0-2].expresion,
            derecho: $$[$0].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 56:
 this.$ = {
        nodo: (new relacionales($$[$0-2].nodo, $$[$0].nodo, oper_rel.MAYOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column)),

        expresion: {
            izquierdo: $$[$0-2].expresion,
            derecho: $$[$0].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 57:
 this.$ = {
        nodo: (new relacionales($$[$0-2].nodo, $$[$0].nodo, oper_rel.NO_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column)),

        expresion: {
            izquierdo: $$[$0-2].expresion,
            derecho: $$[$0].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 58:
 this.$ = {
        nodo: (new relacionales($$[$0-2].nodo, $$[$0].nodo, oper_rel.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column)),

        expresion: {
            izquierdo: $$[$0-2].expresion,
            derecho: $$[$0].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 59:
 this.$ = {
        nodo: (new logicas_($$[$0-2].nodo, $$[$0].nodo, oper_logica.OR, _$[$0-2].first_line, _$[$0-2].first_column)),

        expresion: {
            izquierdo: $$[$0-2].expresion,
            derecho: $$[$0].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 60:
 this.$ = {
        nodo: (new logicas_($$[$0-2].nodo, $$[$0].nodo, oper_logica.AND, _$[$0-2].first_line, _$[$0-2].first_column)),

        expresion: {
            izquierdo: $$[$0-2].expresion,
            derecho: $$[$0].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 61:
 this.$ = {
        nodo: (new logicas_($$[$0].nodo, null, oper_logica.NEGAR, _$[$0-1].first_line, _$[$0-1].first_column)),

        expresion: {
            izquierdo: $$[$0].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 64:
 this.$ = {
        nodo: (new primitivo_(0, $$[$0], _$[$0].first_line, _$[$0].first_column)),

        expresion: {
            dato: $$[$0],
            tipo: "number"
        }
    }; 
break;
case 65:
 this.$ = {
        nodo: (new primitivo_(0, $$[$0], _$[$0].first_line, _$[$0].first_column)),

        expresion: {
            dato: $$[$0],
            tipo: "number"
        }   
    }; 
break;
case 66:
 this.$ = {
        nodo: (new string_c3d(1, $$[$0].replace(/\"/g,""), _$[$0].first_line, _$[$0].first_column)),

        expresion: {
            dato: $$[$0],
            tipo: "string"
        }
    }; 
break;
case 67:
 this.$ = {
        nodo: (new acceso($$[$0], _$[$0].first_line, _$[$0].first_column)),
        id: $$[$0],
        
        expresion: {
            dato: $$[$0],
            tipo: "variable"
        }
    }; 
break;
case 68:
  this.$ = {
        nodo: (new primitivo_(2, true, _$[$0].first_line, _$[$0].first_column)),

        expresion: {
            dato: $$[$0],
            tipo: "boolean"
        }
    }; 
break;
case 69:
 this.$ = {
        nodo: (new primitivo_(2, false, _$[$0].first_line, _$[$0].first_column)),

        expresion: {
            dato: $$[$0],
            tipo: "boolean"
        }
    }; 
break;
case 74:
 this.$ = {
        nodo: (new llamada_($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column))
    }; 
break;
case 75:
 this.$ = {
        nodo: (new llamada_($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column))
    }; 
break;
case 80:
 this.$ = {
        nodo: (new tipos_(0)),
        dato: $$[$0]
    }; 
break;
case 81:
 this.$ = {
        nodo: (new tipos_(1)),
        dato: $$[$0]
    }; 
break;
case 82:
 this.$ = {
        nodo: (new tipos_(3)),
        dato: $$[$0]
    }; 
break;
case 83:
 this.$ = {
        nodo: (new tipos_(2)),
        dato: $$[$0]
    }; 
break;
case 85:
 this.$ = {
        nodo: (new if_c3d($$[$0-3].nodo, $$[$0-1].nodo, $$[$0].nodo, _$[$0-5].first_line, _$[$0-5].first_column)),

            tipo: "if_",
            condicion: $$[$0-3].expresion,
            instrucciones: $$[$0-1].instr,
            else: $$[$0]
    }; 
break;
case 88:
 this.$ = {
        text: ""
    }; 
break;
case 89:
 this.$ = {
       nodo: (new statement_($$[$0-1],  _$[$0-2].first_line, _$[$0-2].first_column)),
       instr: $$[$0-1]
    }; 
break;
case 90:
 this.$ = {
        nodo: (new statement_(new Array(),  _$[$0-1].first_line, _$[$0-1].first_column)),
        instr: new Array()
    }; 
break;
case 91:
 this.$ = {
        nodo: (new instrucciones_($$[$0],  _$[$0].first_line, _$[$0].first_column)),
        instr: $$[$0]
    }; 
break;
case 92:
 this.$ = {
        nodo: (new while_c3d($$[$0-2].nodo, $$[$0].nodo, _$[$0-4].first_line, _$[$0-4].first_column)),        

        tipo: "while_",
        cond: $$[$0-2].expresion,
        instr: $$[$0].instr
    }; 
break;
case 93:
 this.$ = {        
        nodo: (new do_while_c3d($$[$0-2].nodo, $$[$0-5].nodo, _$[$0-6].first_linea, _$[$0-6].first_column)),        

        tipo: "dowhile_",
        cond: $$[$0-2].expresion,
        instr: $$[$0-5].instr
    }; 
break;
case 94:
 this.$ = {
        nodo: (new switch_($$[$0-4].nodo, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column)),
        
        tipo: "switch_",
        instr: $$[$0-1],
        cond: $$[$0-4].expresion
    }; 
break;
case 97:
 this.$ = {
        nodo: (new case_($$[$0-2].nodo, $$[$0].nodo, _$[$0-3].first_line, _$[$0-3].first_column)),

        expresion: $$[$0-2].expresion,
        instr: $$[$0].instr
    }; 
break;
case 98:
 this.$ = {
        nodo: (new case_(null, $$[$0].nodo, _$[$0-2].first_line, _$[$0-2].first_column)),

        instr: $$[$0].instr
    }; 
break;
case 99:
 this.$ = {
        text: $$[$0-7] + $$[$0-6] + $$[$0-5] + " " + $$[$0-4] + " " + $$[$0-3] + " " + $$[$0-2] + $$[$0-1],
        escritura: 1,
        instr: $$[$0].instr
    }; 
break;
case 100:
 this.$ = {
        text: $$[$0-7] + " " + $$[$0-6] + $$[$0-5] + " " + $$[$0-4] + " " + $$[$0-3] + " " + $$[$0-2] + $$[$0-1],
        escritura: 1,
        instr: $$[$0].instr
    }; 
break;
case 101: case 102:
 this.$ = {
        nodo: (new for_($$[$0-4].nodo, $$[$0-2].nodo, $$[$0-5].nodo, $$[$0].nodo, $$[$0-5].id, _$[$0-7].first_line, _$[$0-7].first_column)),        

        tipo: "for_",
        instr: $$[$0]
    }; 
break;
case 103:
 this.$ = {
        nodo: (new for_($$[$0-4].nodo, $$[$0-2].nodo, null, $$[$0].nodo, $$[$0-6], _$[$0-8].first_line, _$[$0-8].first_column)),
        
        tipo: "for_",
        instr: $$[$0-1]
    }; 
break;
case 104:
 this.$ = {
        nodo: (new return_(null, _$[$0-1].first_line, _$[$0-1].first_column)),

        tipo: "return_"
    }; 
break;
case 105:
  this.$ = {
        nodo: (new return_($$[$0-1].nodo, _$[$0-2].first_line, _$[$0-2].first_column)),

        tipo: "return_",
        expresion: $$[$0-1].expresion
    }; 
break;
case 106:
 this.$ = {
        nodo: (new function_($$[$0-6], $$[$0].nodo, $$[$0-4], _$[$0-7].first_line, _$[$0-7].first_column, $$[$0-1].dato)),

        tipo: "funcion",
        id: $$[$0-6],
        param: $$[$0-4],
        instr: $$[$0].instr
    }; 
break;
case 107:
 this.$ = {
        nodo: (new function_($$[$0-5], $$[$0].nodo, [], _$[$0-6].first_line, _$[$0-6].first_column, $$[$0-1].dato)),

        tipo: "funcion",
        id: $$[$0-5],
        instr: $$[$0].instr
    }; 
break;
case 110:
 this.$ = {
        id: $$[$0-2],
        tipo: $$[$0].dato
    }; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:$V2,26:20,27:$V3,28:$V4,30:$V5,32:23,33:24,34:$V6,36:26,39:36,49:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,75:$Vd,76:$Ve,81:$Vf,86:$Vg,87:$Vh,88:$Vi,93:$Vj,96:$Vk,97:$Vl},{1:[3]},{2:$V0,5:[1,45],6:46,7:4,8:5,9:6,10:7,11:8,12:9,14:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:$V2,26:20,27:$V3,28:$V4,30:$V5,32:23,33:24,34:$V6,36:26,39:36,49:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,75:$Vd,76:$Ve,81:$Vf,86:$Vg,87:$Vh,88:$Vi,93:$Vj,96:$Vk,97:$Vl},o($Vm,[2,3]),o($Vm,[2,4]),o($Vm,[2,5]),o($Vm,[2,6]),o($Vm,[2,7]),o($Vm,[2,8]),o($Vn,$Vo,{13:[1,47]}),{15:[1,48],16:[1,49]},o($Vm,[2,12]),o($Vm,[2,13]),o($Vm,[2,14]),o($Vm,[2,15]),o($Vm,[2,16]),o($Vm,[2,17]),o($Vm,[2,18]),{13:[1,50]},{13:[1,51]},o($Vm,[2,21]),{28:[1,52]},{28:[1,53]},o($Vn,$Vp,{13:[1,54]}),o($Vn,$Vq,{13:[1,55]}),o($Vm,[2,26]),{34:[1,56]},{34:[1,57]},{34:[1,58]},o($Vn,$Vr,{28:$Vs,35:$Vt,40:$Vu}),{12:67,14:63,28:$V4,31:62,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},o($Vy,[2,64]),o($Vy,[2,65]),o($Vy,[2,66]),o($Vy,[2,68]),o($Vy,[2,69]),o($Vy,[2,71]),{28:[1,70]},{28:[1,71]},{50:$Vz,82:72},{28:[1,74]},{28:[1,75]},{12:67,13:[1,76],14:63,28:$V4,31:77,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{34:[2,78]},{34:[2,79]},{1:[2,1]},o($Vm,[2,2]),o($Vm,[2,9]),{13:[1,78]},{13:[1,79]},o($Vm,[2,19]),o($Vm,[2,20]),{29:[1,80]},{12:67,14:63,28:$V4,31:81,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},o($Vm,[2,24]),o($Vm,[2,25]),{37:[1,82]},{28:[1,83]},{35:[1,84]},{12:67,14:63,28:$V4,31:85,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:63,28:$V4,29:[1,86],31:88,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,74:87},{41:[1,91],42:[1,89],43:[1,90]},{29:[1,92],54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN},o($VO,[2,62],{15:[1,107],16:[1,108]}),{12:67,14:63,28:$V4,31:109,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:63,28:$V4,31:110,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},o($Vy,$Vr,{28:$Vs,40:$Vu}),o($Vy,$Vo),o($Vy,$Vp),o($Vy,$Vq),{12:67,14:63,28:$V4,31:111,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:63,28:$V4,31:112,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{86:[1,113]},{2:$V0,4:114,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:$V2,26:20,27:$V3,28:$V4,30:$V5,32:23,33:24,34:$V6,36:26,39:36,49:$V7,52:[1,115],69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,75:$Vd,76:$Ve,81:$Vf,86:$Vg,87:$Vh,88:$Vi,93:$Vj,96:$Vk,97:$Vl},{12:67,14:63,28:$V4,31:116,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{7:117,11:118,34:[1,119],36:120,75:$Vd,76:$Ve},o($Vm,[2,104]),{13:[1,121],54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN},o($Vm,[2,10]),o($Vm,[2,11]),{13:[1,122]},{29:[1,123],54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN},{34:$VP,38:124,77:$VQ,78:$VR,79:$VS,80:$VT},{29:[1,131],34:$VU,98:130,99:132},{50:[1,134]},{13:[1,135],54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN},o($Vy,[2,74]),{29:[1,136],48:[1,137]},o($VV,[2,77],{54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN}),{28:[1,138]},{28:[1,139]},o($Vy,[2,30]),o($Vy,[2,63]),{12:67,14:63,28:$V4,31:140,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:63,28:$V4,31:141,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:63,28:$V4,31:142,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:63,28:$V4,31:143,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:63,28:$V4,31:144,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:63,28:$V4,31:145,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:63,28:$V4,31:146,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:63,28:$V4,31:147,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:63,28:$V4,31:148,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:63,28:$V4,31:149,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:63,28:$V4,31:150,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:63,28:$V4,31:151,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:63,28:$V4,31:152,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:63,28:$V4,31:153,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},o($VO,[2,50]),o($VO,[2,51]),o($VW,[2,52],{56:$VC,57:$VD,58:$VE,59:$VF}),o($VX,[2,61],{54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL}),{29:[1,154],54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN},{29:[1,155],54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN},{28:[1,156]},{2:$V0,6:46,7:4,8:5,9:6,10:7,11:8,12:9,14:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:$V2,26:20,27:$V3,28:$V4,30:$V5,32:23,33:24,34:$V6,36:26,39:36,49:$V7,52:[1,157],69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,75:$Vd,76:$Ve,81:$Vf,86:$Vg,87:$Vh,88:$Vi,93:$Vj,96:$Vk,97:$Vl},o($VY,[2,90]),{29:[1,158],54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN},{12:67,14:63,28:$V4,31:159,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:63,28:$V4,31:160,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{13:[1,161],35:$Vt},{34:[1,162]},o($Vm,[2,105]),o($Vm,[2,22]),{13:[1,163]},{13:$VZ,35:$V_,44:166,45:[1,167]},o($V$,[2,80]),o($V$,[2,81]),o($V$,[2,82]),o($V$,[2,83]),o($V$,[2,84]),{29:[1,168],48:[1,169]},{37:[1,170]},o($VV,[2,109]),{37:[1,171]},{34:$V01,51:172,53:173},o($V11,[2,27]),o($Vy,[2,75]),{12:67,14:63,28:$V4,31:175,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{29:[1,176]},{12:67,14:63,28:$V4,31:177,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},o($VW,[2,44],{56:$VC,57:$VD,58:$VE,59:$VF}),o($VW,[2,45],{56:$VC,57:$VD,58:$VE,59:$VF}),o($V21,[2,46],{59:$VF}),o($V21,[2,47],{59:$VF}),o($V21,[2,48],{59:$VF}),o($VO,[2,49]),o($V31,[2,53],{54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF}),o($V31,[2,54],{54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF}),o($V31,[2,55],{54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF}),o($V31,[2,56],{54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF}),o($V41,[2,57],{54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ}),o($V41,[2,58],{54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ}),o([13,29,37,47,48,66],[2,59],{54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,67:$VN}),o($VX,[2,60],{54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL}),{50:$Vz,82:178},{50:$Vz,82:179},{12:67,14:63,28:$V4,31:180,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},o($VY,[2,89]),{50:[1,181]},{13:[1,182],54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN},{13:[1,183],54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN},{12:67,14:63,28:$V4,31:184,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{37:[1,187],94:[1,185],95:[1,186]},o($Vm,[2,23]),o($V11,[2,28]),{12:67,14:63,28:$V4,31:188,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{13:[1,189],35:[1,190],45:$V51},{47:$V61},{37:[1,193]},{34:$VU,99:194},{34:$VP,38:195,77:$VQ,78:$VR,79:$VS,80:$VT},{34:$VP,38:196,77:$VQ,78:$VR,79:$VS,80:$VT},{34:$V01,52:[1,197],53:198},o($V71,[2,42]),{37:[1,199]},o($VV,[2,76],{54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN}),o($Vy,[2,31]),{29:[1,200],54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN},o($Vm,[2,88],{83:201,84:[1,202]}),o($Vm,[2,92]),{29:[1,203],54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN},{89:204,90:205,91:$V81,92:$V91},{12:67,14:63,28:$V4,31:208,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:63,28:$V4,31:209,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{13:[1,210],54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN},{34:[1,211]},{34:[1,212]},{34:$VP,38:213,77:$VQ,78:$VR,79:$VS,80:$VT},{13:[1,214],54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN},o($Vm,[2,33]),{44:216,45:[1,215]},{47:[1,217]},o($Va1,[2,39]),{34:$VP,38:218,77:$VQ,78:$VR,79:$VS,80:$VT},o($VV,[2,108]),{50:$Vz,82:219},o($VV,[2,110]),{13:[1,220]},o($V71,[2,41]),{34:$VP,38:221,77:$VQ,78:$VR,79:$VS,80:$VT},o($Vy,[2,32]),o($Vm,[2,85]),{17:222,50:$Vz,81:$Vf,82:223},{13:[1,224]},{52:[1,225],90:226,91:$V81,92:$V91},o($Vb1,[2,96]),{12:67,14:63,28:$V4,31:227,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{37:[1,228]},{29:[1,229],54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN},{29:[1,230],54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN},{12:67,14:63,28:$V4,31:231,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{29:[1,232]},{29:[1,233]},{13:$VZ,35:$V_},o($V11,[2,29]),{12:67,14:63,28:$V4,31:235,32:68,33:69,34:$Vv,39:36,46:234,47:$V61,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{13:[1,236],45:$V51},o($Va1,[2,38]),{50:$Vz,82:237},o($Vm,[2,107]),o($Vm,[2,40]),{13:[1,238]},o($Vm,[2,86]),o($Vm,[2,87]),o($Vm,[2,93]),o($Vm,[2,94]),o($Vb1,[2,95]),{37:[1,239],54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN},{2:$V0,4:241,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:$V2,26:20,27:$V3,28:$V4,30:$V5,32:23,33:24,34:$V6,36:26,39:36,49:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,75:$Vd,76:$Ve,81:$Vf,85:240,86:$Vg,87:$Vh,88:$Vi,93:$Vj,96:$Vk,97:$Vl},{50:$Vz,82:242},{50:$Vz,82:243},{29:[1,244],54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN},{50:$Vz,82:245},{50:$Vz,82:246},{47:[1,247],48:[1,248]},o($Vc1,[2,37],{54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN}),o($Vm,[2,35]),o($Vm,[2,106]),o($V71,[2,43]),{2:$V0,4:241,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:$V2,26:20,27:$V3,28:$V4,30:$V5,32:23,33:24,34:$V6,36:26,39:36,49:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,75:$Vd,76:$Ve,81:$Vf,85:249,86:$Vg,87:$Vh,88:$Vi,93:$Vj,96:$Vk,97:$Vl},o($Vb1,[2,98]),o($Vb1,[2,91],{7:4,8:5,9:6,10:7,11:8,12:9,14:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,26:20,32:23,33:24,36:26,39:36,6:46,2:$V0,24:$V1,25:$V2,27:$V3,28:$V4,30:$V5,34:$V6,49:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,75:$Vd,76:$Ve,81:$Vf,86:$Vg,87:$Vh,88:$Vi,93:$Vj,96:$Vk,97:$Vl}),o($Vm,[2,101]),o($Vm,[2,102]),{50:$Vz,82:250},o($Vm,[2,99]),o($Vm,[2,100]),{13:[1,251]},{12:67,14:63,28:$V4,31:252,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},o($Vb1,[2,97]),o($Vm,[2,103]),o($Vm,[2,34]),o($Vc1,[2,36],{54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN})],
defaultActions: {43:[2,78],44:[2,79],45:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //ERRORES
    const { nodoError } = require('../js/error/error');
    const { errores } = require('../js/error/errores');

    //INSTRUCCIONES
    const { declaracion_ } = require('../js/c3d/instrucciones/variables/declaracion');
    const { statement_ } = require('../js/c3d/instrucciones/statement');
    const { if_c3d } = require('../js/c3d/instrucciones/if');
    const { while_c3d } = require('../js/c3d/instrucciones/while');
    const { do_while_c3d } = require('../js/c3d/instrucciones/do_while');
    const { print_ } = require('../js/c3d/instrucciones/print');

    //EXPRESIONES
    const { suma } = require('../js/c3d/expresion/suma');
    const { resta } = require('../js/c3d/expresion/resta');
    const { multiplicacion } = require('../js/c3d/expresion/multiplicacion');
    const { dividir } = require('../js/c3d/expresion/dividir');
    const { modulo } = require('../js/c3d/expresion/modulo');
    const { oper_rel, relacionales } = require('../js/c3d/logicas/relacional');
    const { oper_logica, logicas_ } = require('../js/c3d/logicas/logicas_');

    //DATOS 
    const { primitivo_ } = require('../js/c3d/expresion/acceso');
    const { string_c3d } = require('../js/c3d/expresion/string_c3d');
    const { tipos_ } = require('../js/c3d/tools/tipo');
//--------------------------------------------------------------------------------------
    //INSTRUCCIONES
    const { print } = require('../js/instruccion/print');
    const { if_ } = require('../js/instruccion/if');
    const { while_ } = require('../js/instruccion/while');
    const { dowhile_ } = require('../js/instruccion/dowhile')
    const { for_ } = require('../js/instruccion/for');
    const { instrucciones_ } = require('../js/instruccion/instrucciones');
    const { asignacion_ } = require('../js/instruccion/asignacion');
    const { break_ } = require('../js/instruccion/break');
    const { continue_ } = require('../js/instruccion/continue');
    const { switch_ } = require('../js/instruccion/switch');
    const { case_ } = require('../js/instruccion/case');
    const { return_ } = require('../js/instruccion/return');
    const { function_ } = require('../js/instruccion/function');
    const { llamada_ } = require('../js/instruccion/llamada');
    const { arreglo } = require('../js/instruccion/arreglo');
    const { length_ } = require('../js/instruccion/length');
    const { pop_ } = require('../js/instruccion/pop');
    const { push_ } = require('../js/instruccion/push');

    //EXPRESIONES
    const { operacion_unitaria, aritmetica_unitaria } = require('../js/expresion/aritmetica_unaria');

    //DATOS 
    const { dato_literal } = require('../js/expresion/dato');
    const { acceso } = require('../js/expresion/acceso');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* EVITAR ESPACIOS EN BLANCO */
break;
case 1: /*yy_.yytext = yy_.yytext.substr( 1 , yy_.yyleng-2 );*/ return 71; 
break;
case 2: /*yy_.yytext = yy_.yytext.substr( 1 , yy_.yyleng-2 );*/ return 71; 
break;
case 3:return 78
break;
case 4:return 77
break;
case 5:return 80
break;
case 6:return 79
break;
case 7:return 49
break;
case 8:return 'ARRAY'
break;
case 9:return 59
break;
case 10:return 16
break;
case 11:return 15
break;
case 12:return 54
break;
case 13:return 55
break;
case 14:return 56
break;
case 15:return 57
break;
case 16:return 58
break;
case 17:return 63
break;
case 18:return 62
break;
case 19:return 61
break;
case 20:return 60
break;
case 21:return 65
break;
case 22:return 64
break;
case 23:return 67
break;
case 24:return 66
break;
case 25:return 68
break;
case 26:return '?'
break;
case 27:return 81
break;
case 28:return 84
break;
case 29:return 88
break;
case 30:return 91
break;
case 31:return 92
break;
case 32:return 86
break;
case 33:return 87
break;
case 34:return 93
break;
case 35:return 94
break;
case 36:return 95
break;
case 37:return 43
break;
case 38:return 42
break;
case 39:return 41
break;
case 40:return 75
break;
case 41:return 76
break;
case 42:return 24
break;
case 43:return 25
break;
case 44:return 96
break;
case 45:return 97
break;
case 46:return 30
break;
case 47:return 27
break;
case 48:return 'NEW'
break;
case 49:return 'CHARAT'
break;
case 50:return 'TOLOWERCASE'
break;
case 51:return 'TOUPPERCASE'
break;
case 52:return 'CONCAT' 
break;
case 53:return 72
break;
case 54:return 73
break;
case 55:return 50
break;
case 56:return 52
break;
case 57:return 45
break;
case 58:return 47
break;
case 59:return 35
break;
case 60:return 48
break;
case 61:return 13
break;
case 62:return 37
break;
case 63:return 28
break;
case 64:return 29
break;
case 65:return 40
break;
case 66:return 70
break;
case 67:return 69
break;
case 68:return 34
break;
case 69:return 'BOOLEANO'
break;
case 70:return 5
break;
case 71:errores.addError(new nodoError("Lexico","Caracter desconocido",yy_.yylloc.first_line, yy_.yylloc.first_column, yy_.yytext))
break;
}
},
rules: [/^(?:\s+)/,/^(?:(("[^"]*")))/,/^(?:(('[^']*')\/\/.*[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]))/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:Array\b)/,/^(?:\*\*)/,/^(?:--)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:function\b)/,/^(?:console\.log\b)/,/^(?:graficar_ts\b)/,/^(?:new\b)/,/^(?:CharAt\b)/,/^(?:ToLowerCase\b)/,/^(?:ToUpperCase\b)/,/^(?:Concat\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:=)/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:([0-9]+\.[0-9]+))/,/^(?:([0-9]+))/,/^(?:(([a-zA-Z_])[a-zA-Z0-9_]*))/,/^(?:{booleano})/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = c3d;
exports.Parser = c3d.Parser;
exports.parse = function () { return c3d.parse.apply(c3d, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}