/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var traduccion = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,25],$V1=[1,18],$V2=[1,19],$V3=[1,21],$V4=[1,30],$V5=[1,22],$V6=[1,29],$V7=[1,28],$V8=[1,31],$V9=[1,32],$Va=[1,33],$Vb=[1,34],$Vc=[1,35],$Vd=[1,43],$Ve=[1,44],$Vf=[1,37],$Vg=[1,38],$Vh=[1,39],$Vi=[1,40],$Vj=[1,41],$Vk=[1,42],$Vl=[1,27],$Vm=[2,5,24,25,27,28,30,34,49,52,69,70,71,72,73,75,76,81,85,86,87,90,91,92,96,97],$Vn=[15,16],$Vo=[2,72],$Vp=[2,74],$Vq=[2,75],$Vr=[2,71],$Vs=[1,60],$Vt=[1,59],$Vu=[1,61],$Vv=[1,63],$Vw=[1,64],$Vx=[1,65],$Vy=[13,15,16,29,37,47,48,54,55,56,57,58,59,60,61,62,63,64,65,66,67],$Vz=[1,73],$VA=[1,82],$VB=[1,83],$VC=[1,95],$VD=[1,96],$VE=[1,97],$VF=[1,98],$VG=[1,99],$VH=[1,100],$VI=[1,101],$VJ=[1,102],$VK=[1,103],$VL=[1,104],$VM=[1,105],$VN=[1,106],$VO=[1,107],$VP=[1,108],$VQ=[13,29,37,47,48,54,55,56,57,58,59,60,61,62,63,64,65,66,67],$VR=[2,5,24,25,27,28,30,34,49,52,55,68,69,70,71,72,73,75,76,81,85,86,87,90,91,92,96,97],$VS=[1,133],$VT=[1,129],$VU=[1,130],$VV=[1,131],$VW=[1,132],$VX=[1,137],$VY=[29,48],$VZ=[13,29,37,47,48,54,55,60,61,62,63,64,65,66,67],$V_=[13,29,37,47,48,66,67],$V$=[2,5,24,25,27,28,30,34,49,52,69,70,71,72,73,75,76,81,84,85,86,87,90,91,92,96,97],$V01=[1,169],$V11=[1,170],$V21=[13,29,35,45,48,50],$V31=[1,179],$V41=[13,29,37,47,48,60,61,62,63,64,65,66,67],$V51=[13,29,37,47,48,64,65,66,67],$V61=[1,196],$V71=[1,197],$V81=[34,52],$V91=[1,211],$Va1=[1,212],$Vb1=[13,35,45],$Vc1=[52,90,91],$Vd1=[47,48];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion_variables":7,"declaracion_arreglos":8,"declaracion_funciones":9,"declaracion_types":10,"asignacion":11,"llamada":12,";":13,"dato_valor":14,"++":15,"--":16,"if":17,"while":18,"do_while":19,"switch":20,"for_normal":21,"for_in":22,"for_of":23,"BREAK":24,"CONTINUE":25,"sentencia_return":26,"GRAFICAR":27,"(":28,")":29,"PRINT":30,"expresion":31,"pop_funcion":32,"push_funcion":33,"IDENTIFICADOR":34,"=":35,"tipo_restriccion":36,":":37,"tipo_dato":38,"length_funcion":39,".":40,"LENGTH":41,"POP":42,"PUSH":43,"lista_dimensiones":44,"[":45,"valores_arreglo":46,"]":47,",":48,"TYPE":49,"{":50,"atributos":51,"}":52,"atributo":53,"+":54,"-":55,"*":56,"/":57,"%":58,"**":59,"<":60,">":61,"<=":62,">=":63,"!=":64,"==":65,"||":66,"&&":67,"!":68,"ENTERO":69,"DECIMAL":70,"CADENA":71,"TRUE":72,"FALSE":73,"lista_exp_par":74,"LET":75,"CONST":76,"NUMBER":77,"STRING":78,"VOID":79,"BOOLEAN":80,"IF":81,"statement":82,"else":83,"ELSE":84,"WHILE":85,"DO":86,"SWITCH":87,"cases":88,"case":89,"CASE":90,"DEFAULT":91,"FOR":92,"IN":93,"OF":94,"INDETIFICADOR":95,"RETURN":96,"FUNCTION":97,"parametros":98,"parametro":99,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:";",15:"++",16:"--",24:"BREAK",25:"CONTINUE",27:"GRAFICAR",28:"(",29:")",30:"PRINT",34:"IDENTIFICADOR",35:"=",37:":",40:".",41:"LENGTH",42:"POP",43:"PUSH",45:"[",47:"]",48:",",49:"TYPE",50:"{",52:"}",54:"+",55:"-",56:"*",57:"/",58:"%",59:"**",60:"<",61:">",62:"<=",63:">=",64:"!=",65:"==",66:"||",67:"&&",68:"!",69:"ENTERO",70:"DECIMAL",71:"CADENA",72:"TRUE",73:"FALSE",75:"LET",76:"CONST",77:"NUMBER",78:"STRING",79:"VOID",80:"BOOLEAN",81:"IF",84:"ELSE",85:"WHILE",86:"DO",87:"SWITCH",90:"CASE",91:"DEFAULT",92:"FOR",93:"IN",94:"OF",95:"INDETIFICADOR",96:"RETURN",97:"FUNCTION"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,3],[6,3],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,4],[6,5],[6,2],[6,2],[6,1],[11,4],[7,3],[7,5],[7,5],[7,7],[39,3],[32,5],[33,6],[8,6],[8,10],[8,8],[46,3],[46,1],[44,3],[44,2],[10,7],[51,2],[51,1],[53,4],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,2],[31,2],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,1],[14,3],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[12,3],[12,4],[74,3],[74,1],[36,1],[36,1],[38,1],[38,1],[38,1],[38,1],[38,1],[17,6],[83,2],[83,2],[83,0],[82,3],[82,2],[18,5],[19,7],[20,7],[88,2],[88,1],[89,4],[89,3],[22,8],[23,8],[21,8],[21,8],[21,9],[26,2],[26,3],[9,8],[9,7],[98,3],[98,1],[99,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 43: case 96:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 39: case 44: case 79: case 97: case 110:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 7: case 8: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 21: case 64: case 73: case 74: case 75: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 88: case 89:
 this.$ = $$[$0]; 
break;
case 9:
 this.$ = {
        text: $$[$0-1].text,        
        escritura: 5,

        tipo: "llamada",
        param: $$[$0-1].param,
        dato: $$[$0-1].id
    }; 
break;
case 10:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0],
        escritura: 0,
        valor: $$[$0-2].valor++,

        tipo: "incremento",
        expresion: {
            izquierdo: $$[$0-2].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 11:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0],
        escritura: 0,
        valor: $$[$0-2].valor--,

        tipo: "incremento",
        expresion: {
            izquierdo: $$[$0-2].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 19:
 this.$ = {
        text: $$[$0-1] + $$[$0],
        escritura: 0,

        tipo: "break"
    }; 
break;
case 20:
 this.$ = {
        text: $$[$0-1] + $$[$0],
        escritura: 0,

        tipo: "continue"
    }; 
break;
case 22:
 this.$ = {
        text: $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0],
        escritura: 0
    }; 
break;
case 23:
 this.$ = {
        text: $$[$0-4] + $$[$0-3] + $$[$0-2].text + $$[$0-1] + $$[$0],
        escritura: 0,

        tipo: "print",
        expresion: $$[$0-2].expresion
    }; 
break;
case 24: case 25:
 this.$ = {
        text: $$[$0-1].text + $$[$0],
        escritura: 0
    }; 
break;
case 26:
 errores.addError(new nodoError("Sintáctico","Se esperaba una instrucción y se encontró ",this._$.first_line,this._$.first_column,$$[$0])); this.$ = undefined; 
break;
case 27:
 this.$ = {
        text: $$[$0-3] + $$[$0-2] + $$[$0-1].text + $$[$0],
        escritura: 0,

        tipo: "asignar",
        expresion: $$[$0-1].expresion,
        id: $$[$0-3]
    }; 
break;
case 28:
 this.$ = {
        text: $$[$0-2] + " " + $$[$0-1] + $$[$0],
        escritura: 0,

        tipo: "declaracion_variable",
        restriccion: $$[$0-2],
        id: $$[$0-1]
    };
    tabla_simbolos.push_simbolo(new nodoSimbolo("", $$[$0-1], name_function[name_function.length-1], undefined, undefined, undefined, _$[$0-2].first_line, _$[$0-2].first_column, 0)); 
break;
case 29:
 this.$ = {
        text: $$[$0-4] + " " + $$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1].text + $$[$0],
        valor: $$[$0-1].valor,
        escritura: 0,

        tipo: "declaracion_variable",
        restriccion: $$[$0-4],
        id: $$[$0-3],
        expresion: $$[$0-1].expresion
    }; 
    tabla_simbolos.push_simbolo(new nodoSimbolo("", $$[$0-3], name_function[name_function.length-1], undefined, undefined, $$[$0-1].valor, _$[$0-4].first_line, _$[$0-4].first_column, 0)); 
break;
case 30:
 this.$ = {
        text: $$[$0-4] + " " + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0],
        escritura: 0,

        tipo: "declaracion_variable",
        restriccion: $$[$0-4],
        id: $$[$0-3]
    }; 
    tabla_simbolos.push_simbolo(new nodoSimbolo($$[$0-1], $$[$0-3], name_function[name_function.length-1], undefined, undefined, undefined, _$[$0-4].first_line, _$[$0-4].first_column, 0)); 
break;
case 31:
 this.$ = {
        text: $$[$0-6] + " " + $$[$0-5] + $$[$0-4] + $$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1].text + $$[$0],
        valor: $$[$0-1].valor,
        escritura: 0,

        tipo: "declaracion_variable",
        restriccion: $$[$0-6],
        id: $$[$0-5],
        expresion: $$[$0-1].expresion
    }; 
    tabla_simbolos.push_simbolo(new nodoSimbolo($$[$0-3], $$[$0-5], name_function[name_function.length-1], undefined, undefined, $$[$0-1].valor,  _$[$0-6].first_line, _$[$0-6].first_column, 0)); 
break;
case 32:
 this.$ = {
        text: $$[$0-2] + $$[$0-1] + $$[$0],
        escritura: 0
    }; 
break;
case 33:
 this.$ = {
        text: $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0],
        escritura: 0
    }; 
break;
case 34:
 this.$ = {
        text: $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1].text + $$[$0],
        escritura: 0
    }; 
break;
case 35:
 this.$ = {
        text: $$[$0-5] + " " + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1].text + $$[$0],
        escritura: 0,

        tipo: "arreglo",
        id:  $$[$0-4]
    }; 
    tabla_simbolos.push_simbolo(new nodoSimbolo($$[$0-2], $$[$0-4], name_function[name_function.length-1], undefined, undefined, "@arreglo", _$[$0-5].first_line, _$[$0-5].first_column, 0)); 
break;
case 36:
 
        let str_items = "";
        let count_items = 0;
        for(let item of $$[$0-2]){
            if(count_items > 0){
                str_items += "," + item.text
            }else{
                str_items += item.text
            }
            count_items++;
        }
        this.$ = {
        text: $$[$0-9] + " " + $$[$0-8] + $$[$0-7] + $$[$0-6] + $$[$0-5].text + $$[$0-4] + $$[$0-3] + str_items + $$[$0-1] + $$[$0],
        escritura: 0,

        tipo: "arreglo",
        id:  $$[$0-8]
    }; 
    tabla_simbolos.push_simbolo(new nodoSimbolo($$[$0-6], $$[$0-8], name_function[name_function.length-1], undefined, undefined, "@arreglo", _$[$0-9].first_line, _$[$0-9].first_column, 0)); 
break;
case 37:
 this.$ = {
        text: $$[$0-7] + " " + $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3].text + $$[$0-2] + $$[$0-1].text + $$[$0],
        escritura: 0,

        tipo: "arreglo",
        id:  $$[$0-6]
    }; 
    tabla_simbolos.push_simbolo(new nodoSimbolo($$[$0-4], $$[$0-6], name_function[name_function.length-1], undefined, undefined, "@arreglo", _$[$0-7].first_line, _$[$0-7].first_column, 0)); 
break;
case 38: case 78: case 109:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 40:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0]
    }; 
break;
case 41:
 this.$ = {
        text: $$[$0-1] + $$[$0]
    }; 
break;
case 42:
 this.$ = {
        text: $$[$0-6] + $$[$0-5] + $$[$0-4],
        escritura: 1,
        instr: $$[$0-2]
    }; 
break;
case 45:
 this.$ = {  
        text: $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0],
        escritura: 0
    }; 
break;
case 46:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor + $$[$0].valor,

        expresion: {
            izquierdo: $$[$0-2].expresion,
            derecho: $$[$0].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 47:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor - $$[$0].valor,

        expresion: {
            izquierdo: $$[$0-2].expresion,
            derecho: $$[$0].expresion,
            operador: $$[$0-1]
        }
        
    }; 
break;
case 48:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor * $$[$0].valor,

        expresion: {
            izquierdo: $$[$0-2].expresion,
            derecho: $$[$0].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 49:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor / $$[$0].valor,

        expresion: {
            izquierdo: $$[$0-2].expresion,
            derecho: $$[$0].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 50:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor % $$[$0].valor,

        expresion: {
            izquierdo: $$[$0-2].expresion,
            derecho: $$[$0].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 51:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor ** $$[$0].valor,

        expresion: {
            izquierdo: $$[$0-2].expresion,
            derecho: $$[$0].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 52:
 this.$ = {
        text: $$[$0-1] + $$[$0],
        valor: $$[$0-1].valor++,

        expresion: {
            izquierdo: $$[$0-1].expresion,
            operador: $$[$0]
        }
    }; 
break;
case 53:
 this.$ = {
        text: $$[$0-1] + $$[$0],
        valor: $$[$0-1].valor--,

        expresion: {
            izquierdo: $$[$0-1].expresion,
            operador: $$[$0]
        }
    }; 
break;
case 54:
 this.$ = {
        text: $$[$0-1] + $$[$0].text,
        valor: -$$[$0].valor,

        expresion: {
            izquierdo: $$[$0].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 55:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor < $$[$0].valor,

        expresion: {
            izquierdo: $$[$0-2].expresion,
            derecho: $$[$0].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 56:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor > $$[$0].valor,

        expresion: {
            izquierdo: $$[$0-2].expresion,
            derecho: $$[$0].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 57:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor <= $$[$0].valor,

        expresion: {
            izquierdo: $$[$0-2].expresion,
            derecho: $$[$0].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 58:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor >= $$[$0].valor,

        expresion: {
            izquierdo: $$[$0-2].expresion,
            derecho: $$[$0].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 59:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor != $$[$0].valor,

        expresion: {
            izquierdo: $$[$0-2].expresion,
            derecho: $$[$0].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 60:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor === $$[$0].valor,

        expresion: {
            izquierdo: $$[$0-2].expresion,
            derecho: $$[$0].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 61: case 62:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,

        expresion: {
            izquierdo: $$[$0-2].expresion,
            derecho: $$[$0].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 63:
 this.$ = {
        text: $$[$0-1] + $$[$0].text,

        expresion: {
            izquierdo: $$[$0].expresion,
            operador: $$[$0-1]
        }
    }; 
break;
case 65:
 this.$ = {
        text: $$[$0-2] + $$[$0-1].text + $$[$0],
        expresion: $$[$0-1]
    }; 
break;
case 66:
 this.$ = {
        text: $$[$0],
        valor: +$$[$0],

        expresion: {
            dato: $$[$0],
            tipo: "number"
        }
    }; 
break;
case 67:
 this.$ = {
        text: $$[$0],
        valor: +$$[$0],

        expresion: {
            dato: $$[$0],
            tipo: "number"
        }   
    }; 
break;
case 68:
 this.$ = {
        text: $$[$0],
        valor: $$[$0],

        expresion: {
            dato: $$[$0],
            tipo: "string"
        }
    }; 
break;
case 69:
 this.$ = {
        text: $$[$0],
        valor: $$[$0],

        expresion: {
            dato: $$[$0],
            tipo: "boolean"
        }
    }; 
break;
case 70:
 this.$ = {        
        text: $$[$0],
        valor: $$[$0],

        expresion: {
            dato: $$[$0],
            tipo: "boolean"
        }
    }; 
break;
case 71:
 this.$ = {
        text: $$[$0],
        valor: $$[$0],
        
        expresion: {
            dato: $$[$0],
            tipo: "variable"
        }
    }; 
break;
case 72:
 
        let parametros_str = "";
        let c_p = 0;

        for(let p of $$[$0].param){
            if(c_p != 0){
                parametros_str += "," + p.text;
            }else{
                parametros_str += p.text;
            }

            c_p++;
        };

        this.$ = {
        text: $$[$0].text + parametros_str + ")",
        valor: 0,

        expresion: {
            dato: $$[$0].id,
            tipo: "llamada"
        }
    }; 
break;
case 76:
 this.$ = {
        text: $$[$0-2] + $$[$0-1],
        param: [],
        escritura: 0,
        id: $$[$0-2]
    }; 
break;
case 77:
 this.$ = {
        text: $$[$0-3] + $$[$0-2],
        param: $$[$0-1],
        escritura: 5,
        id: $$[$0-3]
    }; 
break;
case 87:
         
        this.$ = {
            text: $$[$0-5] + $$[$0-4] + $$[$0-3].text + $$[$0-2],
            escritura: 2,
            instr: $$[$0-1],
            els: $$[$0],

            tipo: "if_",
            condicion: $$[$0-3].expresion,
            instrucciones: $$[$0-1],
            else: $$[$0]
        };
     
break;
case 90:
 this.$ = {
        text: "",
        escritura: 0
    }; 
break;
case 91:
 this.$ = $$[$0-1]; 
break;
case 92:
 this.$ = new Array(); 
break;
case 93:
 this.$ = {
        text: $$[$0-4] + $$[$0-3] + $$[$0-2].text + $$[$0-1],
        escritura: 1,        

        tipo: "while_",
        cond: $$[$0-2].expresion,
        instr: $$[$0]
    }; 
break;
case 94:
 this.$ = {        
        text: $$[$0-4] + $$[$0-3] + $$[$0-2].text + $$[$0-1] + $$[$0],
        escritura: 3,        

        tipo: "dowhile_",
        cond: $$[$0-2].expresion,
        instr: $$[$0-5]
    }; 
break;
case 95:
 this.$ = {
        text: $$[$0-6] + $$[$0-5] + $$[$0-4].text + $$[$0-3],
        escritura: 1,
        
        tipo: "switch_",
        instr: $$[$0-1],
        cond: $$[$0-4].expresion
    }; 
break;
case 98:
 this.$ = {
        text: $$[$0-3] + " " + $$[$0-2].text + $$[$0-1],
        escritura: 6,
        instr: $$[$0],

        expresion: $$[$0-2].expresion
    }; 
break;
case 99:
 this.$ = {
        text: $$[$0-2] + $$[$0-1],
        escritura: 6,
        instr: $$[$0],
    }; 
break;
case 100:
 this.$ = {
        text: $$[$0-7] + $$[$0-6] + $$[$0-5] + " " + $$[$0-4] + " " + $$[$0-3] + " " + $$[$0-2] + $$[$0-1],
        escritura: 1,
        instr: $$[$0]
    }; 
break;
case 101:
 this.$ = {
        text: $$[$0-7] + " " + $$[$0-6] + $$[$0-5] + " " + $$[$0-4] + " " + $$[$0-3] + " " + $$[$0-2] + $$[$0-1],
        escritura: 1,
        instr: $$[$0]
    }; 
break;
case 102: case 103:
 this.$ = {
        text: $$[$0-7] + $$[$0-6] + $$[$0-5].text + " " + $$[$0-4].text + $$[$0-3] + $$[$0-2].text + $$[$0-1],
        escritura: 1,        

        tipo: "for_",
        instr: $$[$0]
    }; 
break;
case 104:
 this.$ = {
        text: $$[$0-8] + $$[$0-7] + $$[$0-6].text + " " + $$[$0-5].text + $$[$0-4] + $$[$0-3].text + $$[$0-2],
        escritura: 1,
        
        tipo: "for_",
        instr: $$[$0-1]
    }; 
break;
case 105:
 this.$ = {
        text: $$[$0-1] + " " + $$[$0],
        escritura: 0,

        tipo: "return_"
    }; 
break;
case 106:
  this.$ = {
        text: $$[$0-2] + " " + $$[$0-1].text + $$[$0],
        escritura: 0,

        tipo: "return_",
        expresion: $$[$0-1].expresion
    }; 
break;
case 107:
 this.$ = {
        text: $$[$0-7] + " " + $$[$0-6] + $$[$0-5],
        tipo_dato_f: $$[$0-1],
        escritura: 4,        
        atribs: $$[$0-4],

        tipo: "funcion",
        id: $$[$0-6],
        param: $$[$0-4],
        instr: $$[$0]
    }; 
    tabla_simbolos.push_simbolo(new nodoSimbolo($$[$0-1], $$[$0-6], name_function[name_function.length-1], undefined, undefined, "@function",  _$[$0-7].first_line, _$[$0-7].first_column, 0)); 
break;
case 108:
 this.$ = {
        text: $$[$0-6] + " " + $$[$0-5] + $$[$0-4],
        tipo_dato_f: $$[$0-1],
        escritura: 4,

        tipo: "funcion",
        id: $$[$0-5],
        instr: $$[$0]
    }; 
    tabla_simbolos.push_simbolo(new nodoSimbolo($$[$0-1], $$[$0-5], name_function[name_function.length-1], undefined, undefined, "@function",  _$[$0-6].first_line, _$[$0-6].first_column, 0)); 
break;
case 111:
 this.$ = {
        text: $$[$0-2] + $$[$0-1] + $$[$0],
        escritura: 0,

        id: $$[$0-2],
        tipo: $$[$0]
    }; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:$V2,26:20,27:$V3,28:$V4,30:$V5,32:23,33:24,34:$V6,36:26,39:36,49:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,75:$Vd,76:$Ve,81:$Vf,85:$Vg,86:$Vh,87:$Vi,92:$Vj,96:$Vk,97:$Vl},{1:[3]},{2:$V0,5:[1,45],6:46,7:4,8:5,9:6,10:7,11:8,12:9,14:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:$V2,26:20,27:$V3,28:$V4,30:$V5,32:23,33:24,34:$V6,36:26,39:36,49:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,75:$Vd,76:$Ve,81:$Vf,85:$Vg,86:$Vh,87:$Vi,92:$Vj,96:$Vk,97:$Vl},o($Vm,[2,3]),o($Vm,[2,4]),o($Vm,[2,5]),o($Vm,[2,6]),o($Vm,[2,7]),o($Vm,[2,8]),o($Vn,$Vo,{13:[1,47]}),{15:[1,48],16:[1,49]},o($Vm,[2,12]),o($Vm,[2,13]),o($Vm,[2,14]),o($Vm,[2,15]),o($Vm,[2,16]),o($Vm,[2,17]),o($Vm,[2,18]),{13:[1,50]},{13:[1,51]},o($Vm,[2,21]),{28:[1,52]},{28:[1,53]},o($Vn,$Vp,{13:[1,54]}),o($Vn,$Vq,{13:[1,55]}),o($Vm,[2,26]),{34:[1,56]},{34:[1,57]},{34:[1,58]},o($Vn,$Vr,{28:$Vs,35:$Vt,40:$Vu}),{12:67,14:66,28:$V4,31:62,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},o($Vy,[2,66]),o($Vy,[2,67]),o($Vy,[2,68]),o($Vy,[2,69]),o($Vy,[2,70]),o($Vy,[2,73]),{28:[1,70]},{28:[1,71]},{50:$Vz,82:72},{28:[1,74]},{28:[1,75]},{12:67,13:[1,76],14:66,28:$V4,31:77,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{34:[2,80]},{34:[2,81]},{1:[2,1]},o($Vm,[2,2]),o($Vm,[2,9]),{13:[1,78]},{13:[1,79]},o($Vm,[2,19]),o($Vm,[2,20]),{29:[1,80]},{12:67,14:66,28:$V4,31:81,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},o($Vm,[2,24]),o($Vm,[2,25]),{13:$VA,35:$VB,37:[1,84]},{28:[1,85]},{35:[1,86]},{12:67,14:66,28:$V4,31:87,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:66,28:$V4,29:[1,88],31:90,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,74:89},{41:[1,93],42:[1,91],43:[1,92]},{29:[1,94],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP},o($VQ,$Vr,{15:[1,109],16:[1,110],28:$Vs,40:$Vu}),{12:67,14:66,28:$V4,31:111,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:66,28:$V4,31:112,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},o($VQ,[2,64]),o($VQ,$Vo),o($VQ,$Vp),o($VQ,$Vq),{12:67,14:66,28:$V4,31:113,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:66,28:$V4,31:114,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{85:[1,115]},{2:$V0,4:116,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:$V2,26:20,27:$V3,28:$V4,30:$V5,32:23,33:24,34:$V6,36:26,39:36,49:$V7,52:[1,117],69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,75:$Vd,76:$Ve,81:$Vf,85:$Vg,86:$Vh,87:$Vi,92:$Vj,96:$Vk,97:$Vl},{12:67,14:66,28:$V4,31:118,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{7:119,11:120,34:[1,123],36:122,75:$Vd,76:$Ve,95:[1,121]},o($Vm,[2,105]),{13:[1,124],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP},o($Vm,[2,10]),o($Vm,[2,11]),{13:[1,125]},{29:[1,126],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP},o($VR,[2,28]),{12:67,14:66,28:$V4,31:127,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{34:$VS,38:128,77:$VT,78:$VU,79:$VV,80:$VW},{29:[1,135],34:$VX,98:134,99:136},{50:[1,138]},{13:[1,139],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP},o($Vy,[2,76]),{29:[1,140],48:[1,141]},o($VY,[2,79],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP}),{28:[1,142]},{28:[1,143]},o($Vy,[2,32]),o($Vy,[2,65]),{12:67,14:66,28:$V4,31:144,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:66,28:$V4,31:145,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:66,28:$V4,31:146,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:66,28:$V4,31:147,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:66,28:$V4,31:148,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:66,28:$V4,31:149,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:66,28:$V4,31:150,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:66,28:$V4,31:151,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:66,28:$V4,31:152,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:66,28:$V4,31:153,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:66,28:$V4,31:154,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:66,28:$V4,31:155,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:66,28:$V4,31:156,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:66,28:$V4,31:157,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},o($VQ,[2,52]),o($VQ,[2,53]),o($VZ,[2,54],{56:$VE,57:$VF,58:$VG,59:$VH}),o($V_,[2,63],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN}),{29:[1,158],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP},{29:[1,159],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP},{28:[1,160]},{2:$V0,6:46,7:4,8:5,9:6,10:7,11:8,12:9,14:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:$V2,26:20,27:$V3,28:$V4,30:$V5,32:23,33:24,34:$V6,36:26,39:36,49:$V7,52:[1,161],69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,75:$Vd,76:$Ve,81:$Vf,85:$Vg,86:$Vh,87:$Vi,92:$Vj,96:$Vk,97:$Vl},o($V$,[2,92]),{29:[1,162],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP},{12:67,14:66,28:$V4,31:163,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:66,28:$V4,31:164,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{13:[1,165]},{34:[1,166]},{35:$Vt},o($Vm,[2,106]),o($Vm,[2,22]),{13:[1,167]},{13:[1,168],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP},{13:$V01,35:$V11,44:171,45:[1,172]},o($V21,[2,82]),o($V21,[2,83]),o($V21,[2,84]),o($V21,[2,85]),o($V21,[2,86]),{29:[1,173],48:[1,174]},{37:[1,175]},o($VY,[2,110]),{37:[1,176]},{34:$V31,51:177,53:178},o($VR,[2,27]),o($Vy,[2,77]),{12:67,14:66,28:$V4,31:180,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{29:[1,181]},{12:67,14:66,28:$V4,31:182,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},o($VZ,[2,46],{56:$VE,57:$VF,58:$VG,59:$VH}),o($VZ,[2,47],{56:$VE,57:$VF,58:$VG,59:$VH}),o($VQ,[2,48]),o($VQ,[2,49]),o($VQ,[2,50]),o($VQ,[2,51]),o($V41,[2,55],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH}),o($V41,[2,56],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH}),o($V41,[2,57],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH}),o($V41,[2,58],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH}),o($V51,[2,59],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL}),o($V51,[2,60],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL}),o([13,29,37,47,48,66],[2,61],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,67:$VP}),o($V_,[2,62],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN}),{50:$Vz,82:183},{50:$Vz,82:184},{12:67,14:66,28:$V4,31:185,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},o($V$,[2,91]),{50:[1,186]},{13:[1,187],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP},{13:[1,188],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP},{12:67,14:66,28:$V4,31:189,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{13:$VA,35:$VB,37:[1,192],93:[1,190],94:[1,191]},o($Vm,[2,23]),o($VR,[2,29]),o($VR,[2,30]),{12:67,14:66,28:$V4,31:193,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{13:[1,194],35:[1,195],45:$V61},{47:$V71},{37:[1,198]},{34:$VX,99:199},{34:$VS,38:200,77:$VT,78:$VU,79:$VV,80:$VW},{34:$VS,38:201,77:$VT,78:$VU,79:$VV,80:$VW},{34:$V31,52:[1,202],53:203},o($V81,[2,44]),{37:[1,204]},o($VY,[2,78],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP}),o($Vy,[2,33]),{29:[1,205],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP},o($Vm,[2,90],{83:206,84:[1,207]}),o($Vm,[2,93]),{29:[1,208],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP},{88:209,89:210,90:$V91,91:$Va1},{12:67,14:66,28:$V4,31:213,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{12:67,14:66,28:$V4,31:214,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{13:[1,215],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP},{34:[1,216]},{34:[1,217]},{34:$VS,38:218,77:$VT,78:$VU,79:$VV,80:$VW},{13:[1,219],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP},o($Vm,[2,35]),{44:221,45:[1,220]},{47:[1,222]},o($Vb1,[2,41]),{34:$VS,38:223,77:$VT,78:$VU,79:$VV,80:$VW},o($VY,[2,109]),{50:$Vz,82:224},o($VY,[2,111]),{13:[1,225]},o($V81,[2,43]),{34:$VS,38:226,77:$VT,78:$VU,79:$VV,80:$VW},o($Vy,[2,34]),o($Vm,[2,87]),{17:227,50:$Vz,81:$Vf,82:228},{13:[1,229]},{52:[1,230],89:231,90:$V91,91:$Va1},o($Vc1,[2,97]),{12:67,14:66,28:$V4,31:232,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{37:[1,233]},{29:[1,234],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP},{29:[1,235],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP},{12:67,14:66,28:$V4,31:236,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{29:[1,237]},{29:[1,238]},{13:$V01,35:$V11},o($VR,[2,31]),{12:67,14:66,28:$V4,31:240,32:68,33:69,34:$Vv,39:36,46:239,47:$V71,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},{13:[1,241],45:$V61},o($Vb1,[2,40]),{50:$Vz,82:242},o($Vm,[2,108]),o($Vm,[2,42]),{13:[1,243]},o($Vm,[2,88]),o($Vm,[2,89]),o($Vm,[2,94]),o($Vm,[2,95]),o($Vc1,[2,96]),{37:[1,244],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP},{2:$V0,4:245,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:$V2,26:20,27:$V3,28:$V4,30:$V5,32:23,33:24,34:$V6,36:26,39:36,49:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,75:$Vd,76:$Ve,81:$Vf,85:$Vg,86:$Vh,87:$Vi,92:$Vj,96:$Vk,97:$Vl},{50:$Vz,82:246},{50:$Vz,82:247},{29:[1,248],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP},{50:$Vz,82:249},{50:$Vz,82:250},{47:[1,251],48:[1,252]},o($Vd1,[2,39],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP}),o($Vm,[2,37]),o($Vm,[2,107]),o($V81,[2,45]),{2:$V0,4:253,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:$V2,26:20,27:$V3,28:$V4,30:$V5,32:23,33:24,34:$V6,36:26,39:36,49:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,75:$Vd,76:$Ve,81:$Vf,85:$Vg,86:$Vh,87:$Vi,92:$Vj,96:$Vk,97:$Vl},o($Vc1,[2,99],{7:4,8:5,9:6,10:7,11:8,12:9,14:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,26:20,32:23,33:24,36:26,39:36,6:46,2:$V0,24:$V1,25:$V2,27:$V3,28:$V4,30:$V5,34:$V6,49:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,75:$Vd,76:$Ve,81:$Vf,85:$Vg,86:$Vh,87:$Vi,92:$Vj,96:$Vk,97:$Vl}),o($Vm,[2,102]),o($Vm,[2,103]),{50:$Vz,82:254},o($Vm,[2,100]),o($Vm,[2,101]),{13:[1,255]},{12:67,14:66,28:$V4,31:256,32:68,33:69,34:$Vv,39:36,55:$Vw,68:$Vx,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc},o($Vc1,[2,98],{7:4,8:5,9:6,10:7,11:8,12:9,14:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,26:20,32:23,33:24,36:26,39:36,6:46,2:$V0,24:$V1,25:$V2,27:$V3,28:$V4,30:$V5,34:$V6,49:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,75:$Vd,76:$Ve,81:$Vf,85:$Vg,86:$Vh,87:$Vi,92:$Vj,96:$Vk,97:$Vl}),o($Vm,[2,104]),o($Vm,[2,36]),o($Vd1,[2,38],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM,65:$VN,66:$VO,67:$VP})],
defaultActions: {43:[2,80],44:[2,81],45:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { nodoError } = require('../js/error/error');
    const { errores } = require('../js/error/errores');

    const { tipo } = require('../js/abstract/valores');
    const { nodoSimbolo } = require('../js/tabla_simbolos/nodosimbolo');
    const { tabla_simbolos } = require('../js/tabla_simbolos/tablasimbolos');

    let name_function = new Array;
    name_function.push("global");    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* EVITAR ESPACIOS EN BLANCO */
break;
case 1:/* IGNORAR COMENTARIO */
break;
case 2:/* IGNORAR COMENTARIO */
break;
case 3:return 'SALTOLINEA'
break;
case 4:return 'TABULADOR'
break;
case 5:return 'RETORNOCARRO'
break;
case 6:return 'BARRAINVERTIDA'
break;
case 7: /*yy_.yytext = yy_.yytext.substr( 1 , yy_.yyleng-2 );*/ return 71; 
break;
case 8: /*yy_.yytext = yy_.yytext.substr( 1 , yy_.yyleng-2 );*/ return 71; 
break;
case 9:return 'COMILLASIMPLE'
break;
case 10:return 'COMILLADOBLE'
break;
case 11:return 78
break;
case 12:return 77
break;
case 13:return 80
break;
case 14:return 79
break;
case 15:return 49
break;
case 16:return 'ARRAY'
break;
case 17:return 59
break;
case 18:return 16
break;
case 19:return 15
break;
case 20:return 54
break;
case 21:return 55
break;
case 22:return 56
break;
case 23:return 57
break;
case 24:return 58
break;
case 25:return 63
break;
case 26:return 62
break;
case 27:return 61
break;
case 28:return 60
break;
case 29:return 65
break;
case 30:return 64
break;
case 31:return 67
break;
case 32:return 66
break;
case 33:return 68
break;
case 34:return '?'
break;
case 35:return 81
break;
case 36:return 84
break;
case 37:return 87
break;
case 38:return 90
break;
case 39:return 91
break;
case 40:return 85
break;
case 41:return 86
break;
case 42:return 92
break;
case 43:return 93
break;
case 44:return 94
break;
case 45:return 43
break;
case 46:return 42
break;
case 47:return 41
break;
case 48:return 75
break;
case 49:return 76
break;
case 50:return 24
break;
case 51:return 25
break;
case 52:return 96
break;
case 53:return 97
break;
case 54:return 30
break;
case 55:return 27
break;
case 56:return 72
break;
case 57:return 73
break;
case 58:return 50
break;
case 59:return 52
break;
case 60:return 45
break;
case 61:return 47
break;
case 62:return 35
break;
case 63:return 48
break;
case 64:return 13
break;
case 65:return 37
break;
case 66:return 28
break;
case 67:return 29
break;
case 68:return 40
break;
case 69:return 70
break;
case 70:return 69
break;
case 71:return 34
break;
case 72:return 'BOOLEANO'
break;
case 73:return 5
break;
case 74:errores.addError(new nodoError("Lexico","Caracter desconocido",yy_.yylloc.first_line, yy_.yylloc.first_column, yy_.yytext))
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:(\\))/,/^(?:(\\))/,/^(?:(\\))/,/^(?:(\\\\))/,/^(?:(("[^"]*")))/,/^(?:(('[^']*')\/\/.*[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]))/,/^(?:(\\'))/,/^(?:(\\"))/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:Array\b)/,/^(?:\*\*)/,/^(?:--)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:function\b)/,/^(?:console\.log\b)/,/^(?:graficar_ts\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:=)/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:([0-9]+\.[0-9]+))/,/^(?:([0-9]+))/,/^(?:(([a-zA-Z_])[a-zA-Z0-9_]*))/,/^(?:{booleano})/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = traduccion;
exports.Parser = traduccion.Parser;
exports.parse = function () { return traduccion.parse.apply(traduccion, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}