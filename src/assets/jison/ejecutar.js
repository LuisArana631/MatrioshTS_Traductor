/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ejecutar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,22],$V1=[1,6],$V2=[1,17],$V3=[1,18],$V4=[1,20],$V5=[1,26],$V6=[1,21],$V7=[1,25],$V8=[1,24],$V9=[1,27],$Va=[1,28],$Vb=[1,29],$Vc=[1,30],$Vd=[1,31],$Ve=[1,39],$Vf=[1,40],$Vg=[1,33],$Vh=[1,34],$Vi=[1,35],$Vj=[1,36],$Vk=[1,37],$Vl=[1,38],$Vm=[2,5,9,23,24,26,27,29,31,43,46,61,62,63,64,65,68,69,74,79,80,81,84,85,88],$Vn=[2,63],$Vo=[1,52],$Vp=[1,51],$Vq=[1,57],$Vr=[1,55],$Vs=[1,56],$Vt=[13,14,15,28,34,39,40,48,49,50,51,52,53,54,55,56,57,58,59],$Vu=[1,61],$Vv=[1,70],$Vw=[1,84],$Vx=[1,85],$Vy=[1,78],$Vz=[1,79],$VA=[1,80],$VB=[1,81],$VC=[1,82],$VD=[1,83],$VE=[1,86],$VF=[1,87],$VG=[1,88],$VH=[1,89],$VI=[1,90],$VJ=[1,91],$VK=[14,28,34,39,40,48,49,50,51,52,53,54,55,56,57,58,59],$VL=[2,5,9,23,24,26,27,29,31,43,46,49,60,61,62,63,64,65,68,69,74,79,80,81,84,85,88],$VM=[1,118],$VN=[1,114],$VO=[1,115],$VP=[1,116],$VQ=[1,117],$VR=[14,28,34,39,40,48,49,54,55,56,57,58,59],$VS=[14,28,34,58,59],$VT=[2,5,9,23,24,26,27,29,31,43,46,61,62,63,64,65,68,69,74,77,79,80,81,84,85,88],$VU=[14,32,40],$VV=[1,158],$VW=[14,28,34,39,40,54,55,56,57,58,59],$VX=[14,28,34,56,57,58,59],$VY=[14,32,41],$VZ=[31,46],$V_=[1,182],$V$=[46,84];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion_variables":7,"declaracion_arreglos":8,"declaracion_funciones":9,"declaracion_types":10,"asignacion":11,"dato_valor":12,"++":13,";":14,"--":15,"if":16,"while":17,"do_while":18,"switch":19,"for_normal":20,"for_in":21,"for_of":22,"BREAK":23,"CONTINUE":24,"sentencia_return":25,"GRAFICAR":26,"(":27,")":28,"PRINT":29,"expresion":30,"IDENTIFICADOR":31,"=":32,"tipo_restriccion":33,":":34,"tipo_dato":35,"lista_dimensiones":36,"valores_arreglo":37,"ARRAY":38,"<":39,">":40,"[":41,"]":42,"TYPE":43,"{":44,"atributos":45,"}":46,"atributo":47,"+":48,"-":49,"*":50,"/":51,"%":52,"**":53,"<=":54,">=":55,"!=":56,"==":57,"||":58,"&&":59,"!":60,"ENTERO":61,"DECIMAL":62,"CADENA":63,"TRUE":64,"FALSE":65,"llamada":66,"parametros":67,"LET":68,"CONST":69,"NUMBER":70,"STRING":71,"VOID":72,"BOOLEAN":73,"IF":74,"statement":75,"else":76,"ELSE":77,"statement_switch":78,"WHILE":79,"DO":80,"SWITCH":81,"cases":82,"case":83,"CASE":84,"FOR":85,"IN":86,"OF":87,"RETURN":88,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"declaracion_funciones",13:"++",14:";",15:"--",23:"BREAK",24:"CONTINUE",26:"GRAFICAR",27:"(",28:")",29:"PRINT",31:"IDENTIFICADOR",32:"=",34:":",37:"valores_arreglo",38:"ARRAY",39:"<",40:">",41:"[",42:"]",43:"TYPE",44:"{",46:"}",48:"+",49:"-",50:"*",51:"/",52:"%",53:"**",54:"<=",55:">=",56:"!=",57:"==",58:"||",59:"&&",60:"!",61:"ENTERO",62:"DECIMAL",63:"CADENA",64:"TRUE",65:"FALSE",67:"parametros",68:"LET",69:"CONST",70:"NUMBER",71:"STRING",72:"VOID",73:"BOOLEAN",74:"IF",77:"ELSE",79:"WHILE",80:"DO",81:"SWITCH",84:"CASE",85:"FOR",86:"IN",87:"OF",88:"RETURN"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,3],[6,3],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,4],[6,5],[6,1],[11,4],[7,3],[7,5],[7,5],[7,7],[8,5],[8,7],[8,8],[8,10],[8,5],[36,3],[36,2],[10,7],[45,2],[45,1],[47,4],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,2],[30,2],[30,2],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,2],[30,1],[12,3],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[66,3],[66,4],[33,1],[33,1],[35,1],[35,1],[35,1],[35,1],[35,1],[16,6],[76,2],[76,2],[76,0],[75,3],[75,2],[78,1],[17,5],[18,7],[19,7],[82,2],[82,1],[83,4],[21,8],[22,8],[20,8],[20,8],[20,9],[25,2],[25,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 37: case 86:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 38: case 87:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 7: case 8: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 20: case 58: case 66: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 77: case 78:
 this.$ = $$[$0]; 
break;
case 9:
 this.$ = {
        nodo: (new aritmetica_unitaria($$[$0-2].nodo, operacion_unitaria.INCREMENTO, $$[$0-2].id, _$[$0-2].first_line, _$[$0-2].first_column))
    }; 
break;
case 10:
 this.$ = {
        nodo: (new aritmetica_unitaria($$[$0-2].nodo, operacion_unitaria.DECREMENTO, $$[$0-2].id, _$[$0-2].first_line, _$[$0-2].first_column))
    }; 
break;
case 18:
 this.$ = {
        nodo: (new break_(_$[$0-1].first_line, _$[$0-1].first_column))
    }; 
break;
case 19: case 59:
 this.$ = $$[$0-1]; 
break;
case 21: case 68:
 this.$ = {
        text: $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0],
        escritura: 0
    }; 
break;
case 22:
 this.$ = {
        nodo: (new print($$[$0-2].nodo, _$[$0-4].first_line, _$[$0-4].first_column))
    }; 
break;
case 23:
 errores.addError(new nodoError("Sintáctico","Se esperaba una instrucción y se encontró ",this._$.first_line,this._$.first_column,$$[$0])); this.$ = undefined; 
break;
case 24:
 this.$ = {
        nodo: (new asignacion_($$[$0-1].nodo, $$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column)),
        id: $$[$0-3]
    }; 
break;
case 25:
 this.$ = {
        nodo: (new declaracion($$[$0-1], null, _$[$0-2].first_line, _$[$0-2].first_column, null)),

        tipo: "declaracion_variable",
        restriccion: $$[$0-2],
        id: $$[$0-1]
    }; 
break;
case 26:
 this.$ = {
        nodo: (new declaracion($$[$0-3], $$[$0-1].nodo, _$[$0-4].first_line, _$[$0-4].first_column, null)),

        tipo: "declaracion_variable",
        restriccion: $$[$0-4],
        id: $$[$0-3],        
    }; 
break;
case 27:
 this.$ = {
        nodo: (new declaracion($$[$0-3], null, _$[$0-4].first_line, _$[$0-4].first_column, $$[$0-1])),

        tipo: "declaracion_variable",
        restriccion: $$[$0-4],
        id: $$[$0-3]
    }; 
break;
case 28:
 this.$ = {
        nodo: (new declaracion($$[$0-5], $$[$0-1].nodo, _$[$0-6].first_line, _$[$0-6].first_column, $$[$0-3])),

        tipo: "declaracion_variable",
        restriccion: $$[$0-6],
        id: $$[$0-5]
    }; 
break;
case 29:
 this.$ = {
        text: $$[$0-4].text + " " + $$[$0-3] + $$[$0-2] + $$[$0-1].text + $$[$0],
        escritura: 0,
    }; 
break;
case 30:
 this.$ = {
        text: $$[$0-6].text + " " + $$[$0-5] + $$[$0-4] + $$[$0-3].text + $$[$0-2] + $$[$0-1].text + $$[$0],
        escritura: 0
    }; 
break;
case 31:
 this.$ = {
        text: $$[$0-7].text + " " + $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-3] + $$[$0-2] + $$[$0-1],
        escritura: 0
    }; 
break;
case 32:
 this.$ = {
        text: $$[$0-9].text + " " + $$[$0-8] + $$[$0-7] + $$[$0-6] + $$[$0-5] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2].text + $$[$0-1],
        escritura: 0
    }; 
break;
case 33:
 this.$ = {
        text: $$[$0-4].text + " " + $$[$0-3] + $$[$0-2] + $$[$0-1].text + $$[$0],
        escritura: 0
    }; 
break;
case 34:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0]
    }; 
break;
case 35:
 this.$ = {
        text: $$[$0-1] + $$[$0]
    }; 
break;
case 36:
 this.$ = {
        text: $$[$0-6] + $$[$0-5] + $$[$0-4],
        escritura: 1,
        instr: $$[$0-2]
    }; 
break;
case 39:
 this.$ = {  
        text: $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0],
        escritura: 0
    }; 
break;
case 40:
 this.$ = {
        nodo: (new aritmetica($$[$0-2].nodo, $$[$0].nodo, operacion_aritmetica.SUMA, _$[$0-2].first_line, _$[$0-2].first_column))
    }; 
break;
case 41:
 this.$ = {
        nodo: (new aritmetica($$[$0-2].nodo, $$[$0].nodo, operacion_aritmetica.RESTA, _$[$0-2].first_line, _$[$0-2].first_column))
    }; 
break;
case 42:
 this.$ = {
        nodo: (new aritmetica($$[$0-2].nodo, $$[$0].nodo, operacion_aritmetica.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column))
    }; 
break;
case 43:
 this.$ = {
        nodo: (new aritmetica($$[$0-2].nodo, $$[$0].nodo, operacion_aritmetica.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column))
    }; 
break;
case 44:
 this.$ = {
        nodo: (new aritmetica($$[$0-2].nodo, $$[$0].nodo, operacion_aritmetica.MODULO, _$[$0-2].first_line, _$[$0-2].first_column))
    }; 
break;
case 45:
 this.$ = {
        nodo: (new aritmetica($$[$0-2].nodo, $$[$0].nodo, operacion_aritmetica.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column))
    }; 
break;
case 46:
 this.$ = {
        nodo: (new aritmetica_unitaria($$[$0-1].nodo, operacion_unitaria.INCREMENTO, $$[$0-1].id, _$[$0-1].first_line, _$[$0-1].first_column))
    }; 
break;
case 47:
 this.$ = {
        nodo: (new aritmetica_unitaria($$[$0-1].nodo, operacion_unitaria.DECREMENTO, $$[$0-1].id, _$[$0-1].first_line, _$[$0-1].first_column))
    }; 
break;
case 48:
 this.$ = {
        nodo: (new aritmetica($$[$0].nodo, null, operacion_aritmetica.NEGAR, _$[$0-1].first_line, _$[$0-1].first_column))
    }; 
break;
case 49:
 this.$ = {
        nodo: (new relacional($$[$0-2].nodo, $$[$0].nodo, operacion_relacional.MENOR, _$[$0-2].first_line, _$[$0-2].first_column))
    }; 
break;
case 50:
 this.$ = {
        nodo: (new relacional($$[$0-2].nodo, $$[$0].nodo, operacion_relacional.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column))
    }; 
break;
case 51:
 this.$ = {
        nodo: (new relacional($$[$0-2].nodo, $$[$0].nodo, operacion_relacional.MENOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column))
    }; 
break;
case 52:
 this.$ = {
        nodo: (new relacional($$[$0-2].nodo, $$[$0].nodo, operacion_relacional.MAYOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column))
    }; 
break;
case 53:
 this.$ = {
        nodo: (new relacional($$[$0-2].nodo, $$[$0].nodo, operacion_relacional.NO_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column))
    }; 
break;
case 54:
 this.$ = {
        nodo: (new relacional($$[$0-2].nodo, $$[$0].nodo, operacion_relacional.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column))
    }; 
break;
case 55:
 this.$ = {
        nodo: (new logica($$[$0-2].nodo, $$[$0].nodo, operacion_logica.OR, _$[$0-2].first_line, _$[$0-2].first_column))
    }; 
break;
case 56:
 this.$ = {
        nodo: (new logica($$[$0-2].nodo, $$[$0].nodo, operacion_logica.AND, _$[$0-2].first_line, _$[$0-2].first_column))
    }; 
break;
case 57:
 this.$ = {
        nodo: (new logica($$[$0-1].nodo, null, operacion_logica.NEGAR, _$[$0-1].first_line, _$[$0-1].first_column))
    }; 
break;
case 60: case 61:
 this.$ = {
        nodo: (new dato_literal($$[$0], 0, _$[$0].first_line, _$[$0].first_column))
    }; 
break;
case 62:
 this.$ = {
        nodo: (new dato_literal($$[$0].replace(/\"/g,""), 1, _$[$0].first_line, _$[$0].first_column))
    }; 
break;
case 63:
 this.$ = {
        nodo: (new acceso($$[$0], _$[$0].first_line, _$[$0].first_column)),
        id: $$[$0]
    }; 
break;
case 64:
  this.$ = {
        nodo: (new dato_literal($$[$0], 2, _$[$0].first_line, _$[$0].first_column))
    }; 
break;
case 65:
 this.$ = {
        nodo: (new dato_literal($$[$0], 2, _$[$0].first_line, _$[$0].first_column))
    }; 
break;
case 67:
 this.$ = {
        text: $$[$0-2] + $$[$0-1] + $$[$0],
        escritura: 0
    }; 
break;
case 76:
 this.$ = {
        nodo: (new if_($$[$0-3].nodo, $$[$0-1].nodo, $$[$0].nodo, _$[$0-5].first_line, _$[$0-5].first_column))
    }; 
break;
case 79:
 this.$ = {
        text: ""
    }; 
break;
case 80:
 this.$ = {
       nodo: (new instrucciones_($$[$0-1],  _$[$0-2].first_line, _$[$0-2].first_column))
    }; 
break;
case 81:
 this.$ = {
        nodo: (new instrucciones_(new Array(),  _$[$0-1].first_line, _$[$0-1].first_column))
    }; 
break;
case 82:
 this.$ = {
        nodo: (new instrucciones_($$[$0],  _$[$0].first_line, _$[$0].first_column))
    }; 
break;
case 83:
 this.$ = {
        nodo: (new while_($$[$0-2].nodo, $$[$0].nodo, _$[$0-4].first_line, _$[$0-4].first_column))
    }; 
break;
case 84:
 this.$ = {        
        nodo: (new dowhile_($$[$0-2].nodo, $$[$0-5].nodo, _$[$0-6].first_linea, _$[$0-6].first_column))
    }; 
break;
case 85:
 this.$ = {
        nodo: (new switch_($$[$0-4].nodo, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column))
    }; 
break;
case 88:
 this.$ = {
        nodo: (new case_($$[$0-2].nodo, $$[$0].nodo, _$[$0-3].first_line, _$[$0-3].first_column))
    }; 
break;
case 89:
 this.$ = {
        text: $$[$0-7] + $$[$0-6] + $$[$0-5] + " " + $$[$0-4] + " " + $$[$0-3] + " " + $$[$0-2] + $$[$0-1],
        escritura: 1,
        instr: $$[$0]
    }; 
break;
case 90:
 this.$ = {
        text: $$[$0-7] + " " + $$[$0-6] + $$[$0-5] + " " + $$[$0-4] + " " + $$[$0-3] + " " + $$[$0-2] + $$[$0-1],
        escritura: 1,
        instr: $$[$0]
    }; 
break;
case 91: case 92:
 this.$ = {
        nodo: (new for_($$[$0-4].nodo, $$[$0-2].nodo, $$[$0-5].nodo, $$[$0].nodo, $$[$0-5].id, _$[$0-7].first_line, _$[$0-7].first_column))
    }; 
break;
case 93:
 this.$ = {
        nodo: (new for_($$[$0-4].nodo, $$[$0-2].nodo, null, $$[$0].nodo, $$[$0-6], _$[$0-8].first_line, _$[$0-8].first_column))
    }; 
break;
case 94:
 this.$ = {
        text: $$[$0-1] + " " + $$[$0],
        escritura: 0
    }; 
break;
case 95:
  this.$ = {
        text: $$[$0-2] + " " + $$[$0-1].text + $$[$0],
        escritura: 0
    }; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:$V1,10:7,11:8,12:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:$V2,24:$V3,25:19,26:$V4,27:$V5,29:$V6,31:$V7,33:23,43:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32,68:$Ve,69:$Vf,74:$Vg,79:$Vh,80:$Vi,81:$Vj,85:$Vk,88:$Vl},{1:[3]},{2:$V0,5:[1,41],6:42,7:4,8:5,9:$V1,10:7,11:8,12:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:$V2,24:$V3,25:19,26:$V4,27:$V5,29:$V6,31:$V7,33:23,43:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32,68:$Ve,69:$Vf,74:$Vg,79:$Vh,80:$Vi,81:$Vj,85:$Vk,88:$Vl},o($Vm,[2,3]),o($Vm,[2,4]),o($Vm,[2,5]),o($Vm,[2,6]),o($Vm,[2,7]),o($Vm,[2,8]),{13:[1,43],15:[1,44]},o($Vm,[2,11]),o($Vm,[2,12]),o($Vm,[2,13]),o($Vm,[2,14]),o($Vm,[2,15]),o($Vm,[2,16]),o($Vm,[2,17]),{14:[1,45]},{14:[1,46]},o($Vm,[2,20]),{27:[1,47]},{27:[1,48]},o($Vm,[2,23]),{31:[1,49]},{31:[1,50]},o([13,15],$Vn,{27:$Vo,32:$Vp}),{12:54,27:$V5,30:53,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},o($Vt,[2,60]),o($Vt,[2,61]),o($Vt,[2,62]),o($Vt,[2,64]),o($Vt,[2,65]),o($Vt,[2,66]),{27:[1,58]},{27:[1,59]},{44:$Vu,75:60},{27:[1,62]},{27:[1,63]},{12:54,14:[1,64],27:$V5,30:65,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},{31:[2,69]},{31:[2,70]},{1:[2,1]},o($Vm,[2,2]),{14:[1,66]},{14:[1,67]},o($Vm,[2,18]),o($Vm,[2,19]),{28:[1,68]},{12:54,27:$V5,30:69,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},{14:$Vv,32:[1,71],34:[1,72]},{32:[1,73]},{12:54,27:$V5,30:74,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},{28:[1,75],67:[1,76]},{28:[1,77],39:$Vw,40:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ},o($VK,[2,58],{13:[1,92],15:[1,93]}),{12:54,27:$V5,30:94,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},{12:54,27:$V5,30:95,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},o($Vt,$Vn,{27:$Vo}),{12:54,27:$V5,30:96,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},{12:54,27:$V5,30:97,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},{79:[1,98]},{2:$V0,4:99,6:3,7:4,8:5,9:$V1,10:7,11:8,12:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:$V2,24:$V3,25:19,26:$V4,27:$V5,29:$V6,31:$V7,33:23,43:$V8,46:[1,100],61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32,68:$Ve,69:$Vf,74:$Vg,79:$Vh,80:$Vi,81:$Vj,85:$Vk,88:$Vl},{12:54,27:$V5,30:101,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},{7:102,11:103,31:[1,104],33:105,68:$Ve,69:$Vf},o($Vm,[2,94]),{14:[1,106],39:$Vw,40:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ},o($Vm,[2,9]),o($Vm,[2,10]),{14:[1,107]},{28:[1,108],39:$Vw,40:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ},o($VL,[2,25]),{12:54,27:$V5,30:109,31:$Vq,37:[1,110],49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},{31:$VM,35:111,36:112,38:[1,113],41:[1,119],70:$VN,71:$VO,72:$VP,73:$VQ},{44:[1,120]},{14:[1,121],39:$Vw,40:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ},o($Vt,[2,67]),{28:[1,122]},o($Vt,[2,59]),{12:54,27:$V5,30:123,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},{12:54,27:$V5,30:124,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},{12:54,27:$V5,30:125,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},{12:54,27:$V5,30:126,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},{12:54,27:$V5,30:127,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},{12:54,27:$V5,30:128,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},{12:54,27:$V5,30:129,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},{12:54,27:$V5,30:130,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},{12:54,27:$V5,30:131,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},{12:54,27:$V5,30:132,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},{12:54,27:$V5,30:133,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},{12:54,27:$V5,30:134,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},{12:54,27:$V5,30:135,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},{12:54,27:$V5,30:136,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},o($VK,[2,46]),o($VK,[2,47]),o($VR,[2,48],{50:$VA,51:$VB,52:$VC,53:$VD}),o($VS,[2,57],{39:$Vw,40:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH}),{28:[1,137],39:$Vw,40:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ},{28:[1,138],39:$Vw,40:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ},{27:[1,139]},{2:$V0,6:42,7:4,8:5,9:$V1,10:7,11:8,12:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:$V2,24:$V3,25:19,26:$V4,27:$V5,29:$V6,31:$V7,33:23,43:$V8,46:[1,140],61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32,68:$Ve,69:$Vf,74:$Vg,79:$Vh,80:$Vi,81:$Vj,85:$Vk,88:$Vl},o($VT,[2,81]),{28:[1,141],39:$Vw,40:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ},{12:54,27:$V5,30:142,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},{12:54,27:$V5,30:143,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},{14:[1,144],32:$Vp},{31:[1,145]},o($Vm,[2,95]),o($Vm,[2,21]),{14:[1,146]},{14:[1,147],39:$Vw,40:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ},{14:[1,148]},{14:[1,149],32:[1,150]},{14:[1,151],32:[1,152],41:[1,153]},{39:[1,154]},o($VU,[2,71]),o($VU,[2,72]),o($VU,[2,73]),o($VU,[2,74]),o($VU,[2,75]),{42:[1,155]},{31:$VV,45:156,47:157},o($VL,[2,24]),o($Vt,[2,68]),o($VR,[2,40],{50:$VA,51:$VB,52:$VC,53:$VD}),o($VR,[2,41],{50:$VA,51:$VB,52:$VC,53:$VD}),o($VK,[2,42]),o($VK,[2,43]),o($VK,[2,44]),o($VK,[2,45]),o($VW,[2,49],{48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD}),o($VW,[2,50],{48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD}),o($VW,[2,51],{48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD}),o($VW,[2,52],{48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD}),o($VX,[2,53],{39:$Vw,40:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF}),o($VX,[2,54],{39:$Vw,40:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF}),o([14,28,34,58],[2,55],{39:$Vw,40:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,59:$VJ}),o($VS,[2,56],{39:$Vw,40:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH}),{44:$Vu,75:159},{44:$Vu,75:160},{12:54,27:$V5,30:161,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},o($VT,[2,80]),{44:[1,162]},{14:[1,163],39:$Vw,40:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ},{14:[1,164],39:$Vw,40:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ},{12:54,27:$V5,30:165,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},{14:$Vv,32:[1,168],34:[1,169],86:[1,166],87:[1,167]},o($Vm,[2,22]),o($VL,[2,26]),o($Vm,[2,33]),o($VL,[2,27]),{12:54,27:$V5,30:170,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},o($Vm,[2,29]),{37:[1,171]},{42:[1,172]},{31:$VM,35:173,70:$VN,71:$VO,72:$VP,73:$VQ},o($VY,[2,35]),{31:$VV,46:[1,174],47:175},o($VZ,[2,38]),{34:[1,176]},o($Vm,[2,79],{76:177,77:[1,178]}),o($Vm,[2,83]),{28:[1,179],39:$Vw,40:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ},{82:180,83:181,84:$V_},{12:54,27:$V5,30:183,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},{12:54,27:$V5,30:184,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},{14:[1,185],39:$Vw,40:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ},{31:[1,186]},{31:[1,187]},{12:54,27:$V5,30:109,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},{31:$VM,35:111,70:$VN,71:$VO,72:$VP,73:$VQ},{14:[1,188],39:$Vw,40:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ},{14:[1,189]},o($VY,[2,34]),{40:[1,190]},{14:[1,191]},o($VZ,[2,37]),{31:$VM,35:192,70:$VN,71:$VO,72:$VP,73:$VQ},o($Vm,[2,76]),{16:193,44:$Vu,74:$Vg,75:194},{14:[1,195]},{46:[1,196],83:197,84:$V_},o($V$,[2,87]),{12:54,27:$V5,30:198,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},{28:[1,199],39:$Vw,40:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ},{28:[1,200],39:$Vw,40:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ},{12:54,27:$V5,30:201,31:$Vq,49:$Vr,60:$Vs,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32},{28:[1,202]},{28:[1,203]},o($VL,[2,28]),o($Vm,[2,30]),{14:[1,204],32:[1,205]},o($Vm,[2,36]),{14:[1,206]},o($Vm,[2,77]),o($Vm,[2,78]),o($Vm,[2,84]),o($Vm,[2,85]),o($V$,[2,86]),{34:[1,207],39:$Vw,40:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ},{44:$Vu,75:208},{44:$Vu,75:209},{28:[1,210],39:$Vw,40:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ},{44:$Vu,75:211},{44:$Vu,75:212},o($Vm,[2,31]),{37:[1,213]},o($VZ,[2,39]),{2:$V0,4:215,6:3,7:4,8:5,9:$V1,10:7,11:8,12:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:$V2,24:$V3,25:19,26:$V4,27:$V5,29:$V6,31:$V7,33:23,43:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:32,68:$Ve,69:$Vf,74:$Vg,78:214,79:$Vh,80:$Vi,81:$Vj,85:$Vk,88:$Vl},o($Vm,[2,91]),o($Vm,[2,92]),{44:$Vu,75:216},o($Vm,[2,89]),o($Vm,[2,90]),{14:[1,217]},o($V$,[2,88]),o($V$,[2,82],{7:4,8:5,10:7,11:8,12:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,25:19,33:23,66:32,6:42,2:$V0,9:$V1,23:$V2,24:$V3,26:$V4,27:$V5,29:$V6,31:$V7,43:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,68:$Ve,69:$Vf,74:$Vg,79:$Vh,80:$Vi,81:$Vj,85:$Vk,88:$Vl}),o($Vm,[2,93]),o($Vm,[2,32])],
defaultActions: {39:[2,69],40:[2,70],41:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //ERRORES
    const { nodoError } = require('../js/error/error');
    const { errores } = require('../js/error/errores');

    //INSTRUCCIONES
    const { declaracion } = require('../js/instruccion/declaracion');
    const { print } = require('../js/instruccion/print');
    const { if_ } = require('../js/instruccion/if');
    const { while_ } = require('../js/instruccion/while');
    const { dowhile_ } = require('../js/instruccion/dowhile')
    const { for_ } = require('../js/instruccion/for');
    const { instrucciones_ } = require('../js/instruccion/instrucciones');
    const { asignacion_ } = require('../js/instruccion/asignacion');
    const { break_ } = require('../js/instruccion/break');
    const { switch_ } = require('../js/instruccion/switch');
    const { case_ } = require('../js/instruccion/case');

    //EXPRESIONES
    const { operacion_aritmetica, aritmetica } = require('../js/expresion/aritmetica');
    const { operacion_unitaria, aritmetica_unitaria } = require('../js/expresion/aritmetica_unaria');
    const { operacion_relacional, relacional } = require('../js/expresion/relacional');
    const { operacion_logica, logica } = require('../js/expresion/logica');

    //DATOS 
    const { dato_literal } = require('../js/expresion/dato');
    const { acceso } = require('../js/expresion/acceso');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* EVITAR ESPACIOS EN BLANCO */
break;
case 1:/* IGNORAR COMENTARIO */
break;
case 2:/* IGNORAR COMENTARIO */
break;
case 3:return 'SALTOLINEA'
break;
case 4:return 'TABULADOR'
break;
case 5:return 'RETORNOCARRO'
break;
case 6:return 'BARRAINVERTIDA'
break;
case 7:return 'COMILLASIMPLE'
break;
case 8:return 'COMILLADOBLE'
break;
case 9: /*yy_.yytext = yy_.yytext.substr( 1 , yy_.yyleng-2 );*/ return 63; 
break;
case 10: /*yy_.yytext = yy_.yytext.substr( 1 , yy_.yyleng-2 );*/ return 63; 
break;
case 11:return 71
break;
case 12:return 70
break;
case 13:return 73
break;
case 14:return 72
break;
case 15:return 43
break;
case 16:return 38
break;
case 17:return 53
break;
case 18:return 15
break;
case 19:return 13
break;
case 20:return 48
break;
case 21:return 49
break;
case 22:return 50
break;
case 23:return 51
break;
case 24:return 52
break;
case 25:return 55
break;
case 26:return 54
break;
case 27:return 40
break;
case 28:return 39
break;
case 29:return 57
break;
case 30:return 56
break;
case 31:return 59
break;
case 32:return 58
break;
case 33:return 60
break;
case 34:return '?'
break;
case 35:return 74
break;
case 36:return 77
break;
case 37:return 81
break;
case 38:return 84
break;
case 39:return 'DEFAULT'
break;
case 40:return 79
break;
case 41:return 80
break;
case 42:return 85
break;
case 43:return 86
break;
case 44:return 87
break;
case 45:return 'PUSH'
break;
case 46:return 'POP'
break;
case 47:return 'LENGTH'
break;
case 48:return 68
break;
case 49:return 69
break;
case 50:return 23
break;
case 51:return 24
break;
case 52:return 88
break;
case 53:return 'FUNCTION'
break;
case 54:return 29
break;
case 55:return 26
break;
case 56:return  'TRUE'
break;
case 57:return 65
break;
case 58:return 44
break;
case 59:return 46
break;
case 60:return 41
break;
case 61:return 42
break;
case 62:return 32
break;
case 63:return ','
break;
case 64:return 14
break;
case 65:return 34
break;
case 66:return 27
break;
case 67:return 28
break;
case 68:return '.'
break;
case 69:return 61
break;
case 70:return 62
break;
case 71:return 31
break;
case 72:return 'BOOLEANO'
break;
case 73:return 5
break;
case 74:errores.addError(new nodoError("Lexico","Caracter desconocido",yy_.yylloc.first_line, yy_.yylloc.first_column, yy_.yytext))
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:(\\))/,/^(?:(\\))/,/^(?:(\\))/,/^(?:(\\\\))/,/^(?:(\\'))/,/^(?:(\\"))/,/^(?:(("[^"]*")))/,/^(?:(('[^']*')\/\/.*[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]))/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:Array\b)/,/^(?:\*\*)/,/^(?:--)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:function\b)/,/^(?:console\.log\b)/,/^(?:graficar_ts\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:=)/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:([0-9]+))/,/^(?:([0-9]+\.[0-9]+))/,/^(?:(([a-zA-Z_])[a-zA-Z0-9_]*))/,/^(?:{booleano})/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ejecutar;
exports.Parser = ejecutar.Parser;
exports.parse = function () { return ejecutar.parse.apply(ejecutar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}