/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ejecutar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,6],$V2=[1,8],$V3=[1,16],$V4=[1,17],$V5=[1,19],$V6=[1,20],$V7=[1,23],$V8=[1,30],$V9=[1,31],$Va=[1,24],$Vb=[1,25],$Vc=[1,26],$Vd=[1,27],$Ve=[1,28],$Vf=[1,29],$Vg=[2,5,9,11,19,21,23,26,40,43,68,69,74,78,79,80,82,85],$Vh=[1,43],$Vi=[1,52],$Vj=[1,48],$Vk=[1,49],$Vl=[1,50],$Vm=[1,53],$Vn=[1,54],$Vo=[1,55],$Vp=[1,56],$Vq=[1,57],$Vr=[1,61],$Vs=[1,79],$Vt=[1,80],$Vu=[1,73],$Vv=[1,74],$Vw=[1,75],$Vx=[1,76],$Vy=[1,77],$Vz=[1,78],$VA=[1,81],$VB=[1,82],$VC=[1,83],$VD=[1,84],$VE=[1,85],$VF=[1,86],$VG=[20,25,36,37,45,46,47,48,49,50,53,54,55,56,57,58],$VH=[2,5,9,11,19,21,23,24,26,29,40,43,46,59,61,62,63,64,65,68,69,74,78,79,80,82,85],$VI=[1,104],$VJ=[1,100],$VK=[1,101],$VL=[1,102],$VM=[1,103],$VN=[20,25,36,37,45,46,53,54,55,56,57,58],$VO=[20,25,57,58],$VP=[20,30,37],$VQ=[1,143],$VR=[20,25,36,37,53,54,55,56,57,58],$VS=[20,25,55,56,57,58],$VT=[20,30,38],$VU=[29,43];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion_variables":7,"declaracion_arreglos":8,"declaracion_funciones":9,"declaracion_types":10,"asignacion":11,"if":12,"while":13,"do_while":14,"switch":15,"for_normal":16,"for_in":17,"for_of":18,"BREAK":19,";":20,"CONTINUE":21,"sentencia_return":22,"GRAFICAR":23,"(":24,")":25,"PRINT":26,"expresion":27,"tipo_restriccion":28,"IDENTIFICADOR":29,"=":30,":":31,"tipo_dato":32,"lista_dimensiones":33,"valores_arreglo":34,"ARRAY":35,"<":36,">":37,"[":38,"]":39,"TYPE":40,"{":41,"atributos":42,"}":43,"atributo":44,"+":45,"-":46,"*":47,"/":48,"%":49,"**":50,"++":51,"--":52,"<=":53,">=":54,"!=":55,"==":56,"||":57,"&&":58,"!":59,"dato_valor":60,"ENTERO":61,"DECIMAL":62,"CADENA":63,"TRUE":64,"FALSE":65,"llamada":66,"parametros":67,"LET":68,"CONST":69,"NUMBER":70,"STRING":71,"VOID":72,"BOOLEAN":73,"IF":74,"statement":75,"else":76,"ELSE":77,"WHILE":78,"DO":79,"SWITCH":80,"cases":81,"FOR":82,"IN":83,"OF":84,"RETURN":85,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"declaracion_funciones",11:"asignacion",19:"BREAK",20:";",21:"CONTINUE",23:"GRAFICAR",24:"(",25:")",26:"PRINT",29:"IDENTIFICADOR",30:"=",31:":",34:"valores_arreglo",35:"ARRAY",36:"<",37:">",38:"[",39:"]",40:"TYPE",41:"{",43:"}",45:"+",46:"-",47:"*",48:"/",49:"%",50:"**",51:"++",52:"--",53:"<=",54:">=",55:"!=",56:"==",57:"||",58:"&&",59:"!",61:"ENTERO",62:"DECIMAL",63:"CADENA",64:"TRUE",65:"FALSE",67:"parametros",68:"LET",69:"CONST",70:"NUMBER",71:"STRING",72:"VOID",73:"BOOLEAN",74:"IF",77:"ELSE",78:"WHILE",79:"DO",80:"SWITCH",81:"cases",82:"FOR",83:"IN",84:"OF",85:"RETURN"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,4],[6,5],[6,1],[7,3],[7,5],[7,5],[7,7],[8,5],[8,7],[8,8],[8,10],[8,5],[33,3],[33,2],[10,7],[42,2],[42,1],[44,4],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,2],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,1],[60,3],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[66,3],[66,4],[28,1],[28,1],[32,1],[32,1],[32,1],[32,1],[32,1],[12,6],[76,2],[76,2],[76,0],[75,3],[13,5],[14,7],[15,5],[17,8],[18,8],[16,8],[22,2],[22,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 34:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 35:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 18: case 55: case 63: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 74: case 75:
 this.$ = $$[$0]; 
break;
case 16: case 17: case 56: case 77:
 this.$ = $$[$0-1]; 
break;
case 19: case 65:
 this.$ = {
        text: $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0],
        escritura: 0
    }; 
break;
case 20:
 this.$ = {
        text: $$[$0-4] + $$[$0-3] + $$[$0-2].text + $$[$0-1] + $$[$0],
        escritura: 0
    }; 
break;
case 21:
 errores.addError(new nodoError("Sintáctico","Se esperaba una instrucción y se encontró ",this._$.first_line,this._$.first_column,$$[$0])); this.$ = undefined; 
break;
case 22:
 this.$ = {
        nodo: (new declaracion($$[$0-1], null, _$[$0-2].first_line, _$[$0-2].first_column)),

        tipo: "declaracion_variable",
        restriccion: $$[$0-2],
        id: $$[$0-1]
    }; 
break;
case 23:
 this.$ = {
        nodo: (new declaracion($$[$0-3], $$[$0-1].nodo, _$[$0-4].first_line, _$[$0-4].first_column)),
    }; 
break;
case 24:
 this.$ = {
        text: $$[$0-4] + " " + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0],
        escritura: 0
    }; 
break;
case 25:
 this.$ = {
        text: $$[$0-6] + " " + $$[$0-5] + $$[$0-4] + $$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1].text + $$[$0],
        valor: $$[$0-1].valor,
        escritura: 0
    }; 
    tabla_simbolos.push_simbolo(new nodoSimbolo($$[$0-3], $$[$0-5], name_function[name_function.length-1], undefined, undefined, $$[$0-1].valor,  _$[$0-6].first_line, _$[$0-6].first_column, 0)); 
break;
case 26: case 30:
 this.$ = {
        text: $$[$0-4].text + " " + $$[$0-3] + $$[$0-2] + $$[$0-1].text + $$[$0],
        escritura: 0
    }; 
break;
case 27:
 this.$ = {
        text: $$[$0-6].text + " " + $$[$0-5] + $$[$0-4] + $$[$0-3].text + $$[$0-2] + $$[$0-1].text + $$[$0],
        escritura: 0
    }; 
break;
case 28:
 this.$ = {
        text: $$[$0-7].text + " " + $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-3] + $$[$0-2] + $$[$0-1],
        escritura: 0
    }; 
break;
case 29:
 this.$ = {
        text: $$[$0-9].text + " " + $$[$0-8] + $$[$0-7] + $$[$0-6] + $$[$0-5] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2].text + $$[$0-1],
        escritura: 0
    }; 
break;
case 31:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0]
    }; 
break;
case 32:
 this.$ = {
        text: $$[$0-1] + $$[$0]
    }; 
break;
case 33:
 this.$ = {
        text: $$[$0-6] + $$[$0-5] + $$[$0-4],
        escritura: 1,
        instr: $$[$0-2]
    }; 
break;
case 36:
 this.$ = {  
        text: $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0],
        escritura: 0
    }; 
break;
case 37:
 this.$ = {
        nodo: (new aritmetica($$[$0-2].nodo, $$[$0].nodo, operacion_aritmetica.SUMA, _$[$0-2].first_line, _$[$0-2].first_column))
    }; 
break;
case 38:
 this.$ = {
        nodo: (new aritmetica($$[$0-2].nodo, $$[$0].nodo, operacion_aritmetica.RESTA, _$[$0-2].first_line, _$[$0-2].first_column))
    }; 
break;
case 39:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor * $$[$0].valor
    }; 
break;
case 40:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor / $$[$0].valor
    }; 
break;
case 41:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor % $$[$0].valor
    }; 
break;
case 42:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor ** $$[$0].valor
    }; 
break;
case 43:
 this.$ = {
        text: $$[$0-1] + $$[$0],
        valor: $$[$0-1].valor++
    }; 
break;
case 44:
 this.$ = {
        text: $$[$0-1] + $$[$0],
        valor: $$[$0-1].valor--
    }; 
break;
case 45:
 this.$ = {
        text: $$[$0-1] + $$[$0].text,
        valor: -$$[$0].valor
    }; 
break;
case 46:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor < $$[$0].valor
    }; 
break;
case 47:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor > $$[$0].valor
    }; 
break;
case 48:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor <= $$[$0].valor
    }; 
break;
case 49:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor >= $$[$0].valor
    }; 
break;
case 50:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor != $$[$0].valor
    }; 
break;
case 51:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text,
        valor: $$[$0-2].valor === $$[$0].valor
    }; 
break;
case 52: case 53:
 this.$ = {
        text: $$[$0-2].text + $$[$0-1] + $$[$0].text
    }; 
break;
case 54:
 this.$ = {
        text: $$[$0-1] + $$[$0].text
    }; 
break;
case 57: case 58:
 this.$ = {
        nodo: (new dato_literal($$[$0], 0, _$[$0].first_line, _$[$0].first_column))
    }; 
break;
case 59:
 this.$ = {
        nodo: (new dato_literal($$[$0].replace(/\"/g,""), 1, _$[$0].first_line, _$[$0].first_column))
    }; 
break;
case 60:
 this.$ = {
        text: $$[$0],
        valor: $$[$0]
    }; 
break;
case 61:
  this.$ = {
        nodo: (new dato_literal($$[$0], 2, _$[$0].first_line, _$[$0].first_column))
    }; 
break;
case 62:
 this.$ = {
        nodo: (new dato_literal($$[$0], 2, _$[$0].first_line, _$[$0].first_column))
    }; 
break;
case 64:
 this.$ = {
        text: $$[$0-2] + $$[$0-1] + $$[$0],
        escritura: 0
    }; 
break;
case 73:
         
        this.$ = {
            text: $$[$0-5] + $$[$0-4] + $$[$0-3].text + $$[$0-2],
            escritura: 2,
            instr: $$[$0-1],
            els: $$[$0]
        };
     
break;
case 76:
 this.$ = {
        text: ""
    }; 
break;
case 78: case 80:
 this.$ = {
        text: $$[$0-4] + $$[$0-3] + $$[$0-2].text + $$[$0-1],
        escritura: 1,
        instr: $$[$0]
    }; 
break;
case 79:
 this.$ = {        
        text: $$[$0-4] + $$[$0-3] + $$[$0-2].text + $$[$0-1] + $$[$0],
        escritura: 3,
        instr: $$[$0-5]
    }; 
break;
case 81:
 this.$ = {
        text: $$[$0-7] + $$[$0-6] + $$[$0-5] + " " + $$[$0-4] + " " + $$[$0-3] + " " + $$[$0-2] + $$[$0-1],
        escritura: 1,
        instr: $$[$0]
    }; 
break;
case 82:
 this.$ = {
        text: $$[$0-7] + " " + $$[$0-6] + $$[$0-5] + " " + $$[$0-4] + " " + $$[$0-3] + " " + $$[$0-2] + $$[$0-1],
        escritura: 1,
        instr: $$[$0]
    }; 
break;
case 83:
 this.$ = {
        text: $$[$0-7] + $$[$0-6] + $$[$0-5].text + " " + $$[$0-4].text + $$[$0-3] + $$[$0-2].text + $$[$0-1],
        escritura: 1,
        instr: $$[$0]
    }; 
break;
case 84:
 this.$ = {
        text: $$[$0-1] + " " + $$[$0],
        escritura: 0
    }; 
break;
case 85:
  this.$ = {
        text: $$[$0-2] + " " + $$[$0-1].text + $$[$0],
        escritura: 0
    }; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:$V1,10:7,11:$V2,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V3,21:$V4,22:18,23:$V5,26:$V6,28:22,40:$V7,68:$V8,69:$V9,74:$Va,78:$Vb,79:$Vc,80:$Vd,82:$Ve,85:$Vf},{1:[3]},{2:$V0,5:[1,32],6:33,7:4,8:5,9:$V1,10:7,11:$V2,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V3,21:$V4,22:18,23:$V5,26:$V6,28:22,40:$V7,68:$V8,69:$V9,74:$Va,78:$Vb,79:$Vc,80:$Vd,82:$Ve,85:$Vf},o($Vg,[2,3]),o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,14]),o($Vg,[2,15]),{20:[1,34]},{20:[1,35]},o($Vg,[2,18]),{24:[1,36]},{24:[1,37]},o($Vg,[2,21]),{29:[1,38]},{29:[1,39]},{24:[1,40]},{24:[1,41]},{41:$Vh,75:42},{24:[1,44]},{24:[1,45]},{20:[1,46],24:$Vi,27:47,29:$Vj,46:$Vk,59:$Vl,60:51,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:58},{29:[2,66]},{29:[2,67]},{1:[2,1]},o($Vg,[2,2]),o($Vg,[2,16]),o($Vg,[2,17]),{25:[1,59]},{24:$Vi,27:60,29:$Vj,46:$Vk,59:$Vl,60:51,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:58},{20:$Vr,30:[1,62],31:[1,63]},{30:[1,64]},{24:$Vi,27:65,29:$Vj,46:$Vk,59:$Vl,60:51,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:58},{24:$Vi,27:66,29:$Vj,46:$Vk,59:$Vl,60:51,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:58},{78:[1,67]},{2:$V0,4:68,6:3,7:4,8:5,9:$V1,10:7,11:$V2,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V3,21:$V4,22:18,23:$V5,26:$V6,28:22,40:$V7,68:$V8,69:$V9,74:$Va,78:$Vb,79:$Vc,80:$Vd,82:$Ve,85:$Vf},{24:$Vi,27:69,29:$Vj,46:$Vk,59:$Vl,60:51,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:58},{7:70,28:71,68:$V8,69:$V9},o($Vg,[2,84]),{20:[1,72],36:$Vs,37:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF},o($VG,[2,60],{24:[1,89],51:[1,87],52:[1,88]}),{24:$Vi,27:90,29:$Vj,46:$Vk,59:$Vl,60:51,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:58},{24:$Vi,27:91,29:$Vj,46:$Vk,59:$Vl,60:51,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:58},o($VG,[2,55]),{24:$Vi,27:92,29:$Vj,46:$Vk,59:$Vl,60:51,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:58},o($VG,[2,57]),o($VG,[2,58]),o($VG,[2,59]),o($VG,[2,61]),o($VG,[2,62]),o($VG,[2,63]),{20:[1,93]},{25:[1,94],36:$Vs,37:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF},o($VH,[2,22]),{24:$Vi,27:95,29:$Vj,34:[1,96],46:$Vk,59:$Vl,60:51,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:58},{29:$VI,32:97,33:98,35:[1,99],38:[1,105],70:$VJ,71:$VK,72:$VL,73:$VM},{41:[1,106]},{25:[1,107],36:$Vs,37:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF},{25:[1,108],36:$Vs,37:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF},{24:[1,109]},{2:$V0,6:33,7:4,8:5,9:$V1,10:7,11:$V2,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V3,21:$V4,22:18,23:$V5,26:$V6,28:22,40:$V7,43:[1,110],68:$V8,69:$V9,74:$Va,78:$Vb,79:$Vc,80:$Vd,82:$Ve,85:$Vf},{25:[1,111],36:$Vs,37:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF},{24:$Vi,27:112,29:$Vj,46:$Vk,59:$Vl,60:51,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:58},{29:[1,113]},o($Vg,[2,85]),{24:$Vi,27:114,29:$Vj,46:$Vk,59:$Vl,60:51,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:58},{24:$Vi,27:115,29:$Vj,46:$Vk,59:$Vl,60:51,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:58},{24:$Vi,27:116,29:$Vj,46:$Vk,59:$Vl,60:51,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:58},{24:$Vi,27:117,29:$Vj,46:$Vk,59:$Vl,60:51,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:58},{24:$Vi,27:118,29:$Vj,46:$Vk,59:$Vl,60:51,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:58},{24:$Vi,27:119,29:$Vj,46:$Vk,59:$Vl,60:51,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:58},{24:$Vi,27:120,29:$Vj,46:$Vk,59:$Vl,60:51,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:58},{24:$Vi,27:121,29:$Vj,46:$Vk,59:$Vl,60:51,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:58},{24:$Vi,27:122,29:$Vj,46:$Vk,59:$Vl,60:51,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:58},{24:$Vi,27:123,29:$Vj,46:$Vk,59:$Vl,60:51,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:58},{24:$Vi,27:124,29:$Vj,46:$Vk,59:$Vl,60:51,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:58},{24:$Vi,27:125,29:$Vj,46:$Vk,59:$Vl,60:51,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:58},{24:$Vi,27:126,29:$Vj,46:$Vk,59:$Vl,60:51,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:58},{24:$Vi,27:127,29:$Vj,46:$Vk,59:$Vl,60:51,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:58},o($VG,[2,43]),o($VG,[2,44]),{25:[1,128],67:[1,129]},o($VN,[2,45],{47:$Vw,48:$Vx,49:$Vy,50:$Vz}),o($VO,[2,54],{36:$Vs,37:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,53:$VA,54:$VB,55:$VC,56:$VD}),{25:[1,130],36:$Vs,37:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF},o($Vg,[2,19]),{20:[1,131]},{20:[1,132],36:$Vs,37:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF},{20:[1,133]},{20:[1,134],30:[1,135]},{20:[1,136],30:[1,137],38:[1,138]},{36:[1,139]},o($VP,[2,68]),o($VP,[2,69]),o($VP,[2,70]),o($VP,[2,71]),o($VP,[2,72]),{39:[1,140]},{29:$VQ,42:141,44:142},{41:$Vh,75:144},{41:$Vh,75:145},{24:$Vi,27:146,29:$Vj,46:$Vk,59:$Vl,60:51,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:58},o([2,5,9,11,19,21,23,26,40,43,68,69,74,77,78,79,80,82,85],[2,77]),{81:[1,147]},{20:[1,148],36:$Vs,37:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF},{20:$Vr,30:[1,151],31:[1,152],83:[1,149],84:[1,150]},o($VN,[2,37],{47:$Vw,48:$Vx,49:$Vy,50:$Vz}),o($VN,[2,38],{47:$Vw,48:$Vx,49:$Vy,50:$Vz}),o($VG,[2,39]),o($VG,[2,40]),o($VG,[2,41]),o($VG,[2,42]),o($VR,[2,46],{45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz}),o($VR,[2,47],{45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz}),o($VR,[2,48],{45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz}),o($VR,[2,49],{45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz}),o($VS,[2,50],{36:$Vs,37:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,53:$VA,54:$VB}),o($VS,[2,51],{36:$Vs,37:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,53:$VA,54:$VB}),o([20,25,57],[2,52],{36:$Vs,37:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,58:$VF}),o($VO,[2,53],{36:$Vs,37:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,53:$VA,54:$VB,55:$VC,56:$VD}),o($VG,[2,64]),{25:[1,153]},o($VG,[2,56]),o($Vg,[2,20]),o($VH,[2,23]),o($Vg,[2,30]),o($VH,[2,24]),{24:$Vi,27:154,29:$Vj,46:$Vk,59:$Vl,60:51,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:58},o($Vg,[2,26]),{34:[1,155]},{39:[1,156]},{29:$VI,32:157,70:$VJ,71:$VK,72:$VL,73:$VM},o($VT,[2,32]),{29:$VQ,43:[1,158],44:159},o($VU,[2,35]),{31:[1,160]},o($Vg,[2,76],{76:161,77:[1,162]}),o($Vg,[2,78]),{25:[1,163],36:$Vs,37:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF},o($Vg,[2,80]),{24:$Vi,27:164,29:$Vj,46:$Vk,59:$Vl,60:51,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:58},{29:[1,165]},{29:[1,166]},{24:$Vi,27:95,29:$Vj,46:$Vk,59:$Vl,60:51,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:58},{29:$VI,32:97,70:$VJ,71:$VK,72:$VL,73:$VM},o($VG,[2,65]),{20:[1,167],36:$Vs,37:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF},{20:[1,168]},o($VT,[2,31]),{37:[1,169]},{20:[1,170]},o($VU,[2,34]),{29:$VI,32:171,70:$VJ,71:$VK,72:$VL,73:$VM},o($Vg,[2,73]),{12:172,41:$Vh,74:$Va,75:173},{20:[1,174]},{25:[1,175],36:$Vs,37:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF},{25:[1,176]},{25:[1,177]},o($VH,[2,25]),o($Vg,[2,27]),{20:[1,178],30:[1,179]},o($Vg,[2,33]),{20:[1,180]},o($Vg,[2,74]),o($Vg,[2,75]),o($Vg,[2,79]),{41:$Vh,75:181},{41:$Vh,75:182},{41:$Vh,75:183},o($Vg,[2,28]),{34:[1,184]},o($VU,[2,36]),o($Vg,[2,83]),o($Vg,[2,81]),o($Vg,[2,82]),{20:[1,185]},o($Vg,[2,29])],
defaultActions: {30:[2,66],31:[2,67],32:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { nodoError } = require('../js/error/error');
    const { errores } = require('../js/error/errores');

    const { declaracion } = require('../js/instruccion/declaracion');
    const { operacion_aritmetica, aritmetica } = require('../js/expresion/aritmetica');

    const { dato_literal } = require('../js/expresion/dato');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* EVITAR ESPACIOS EN BLANCO */
break;
case 1:/* IGNORAR COMENTARIO */
break;
case 2:/* IGNORAR COMENTARIO */
break;
case 3:return 'SALTOLINEA'
break;
case 4:return 'TABULADOR'
break;
case 5:return 'RETORNOCARRO'
break;
case 6:return 'BARRAINVERTIDA'
break;
case 7:return 'COMILLASIMPLE'
break;
case 8:return 'COMILLADOBLE'
break;
case 9: /*yy_.yytext = yy_.yytext.substr( 1 , yy_.yyleng-2 );*/ return 63; 
break;
case 10: /*yy_.yytext = yy_.yytext.substr( 1 , yy_.yyleng-2 );*/ return 63; 
break;
case 11:return 71
break;
case 12:return 70
break;
case 13:return 73
break;
case 14:return 72
break;
case 15:return 40
break;
case 16:return 35
break;
case 17:return 50
break;
case 18:return 52
break;
case 19:return 51
break;
case 20:return 45
break;
case 21:return 46
break;
case 22:return 47
break;
case 23:return 48
break;
case 24:return 49
break;
case 25:return 54
break;
case 26:return 53
break;
case 27:return 37
break;
case 28:return 36
break;
case 29:return 56
break;
case 30:return 55
break;
case 31:return 58
break;
case 32:return 57
break;
case 33:return 59
break;
case 34:return '?'
break;
case 35:return 74
break;
case 36:return 77
break;
case 37:return 80
break;
case 38:return 'CASE'
break;
case 39:return 'DEFAULT'
break;
case 40:return 78
break;
case 41:return 79
break;
case 42:return 82
break;
case 43:return 83
break;
case 44:return 84
break;
case 45:return 'PUSH'
break;
case 46:return 'POP'
break;
case 47:return 'LENGTH'
break;
case 48:return 68
break;
case 49:return 69
break;
case 50:return 'BEARK'
break;
case 51:return 21
break;
case 52:return 85
break;
case 53:return 'FUNCTION'
break;
case 54:return 26
break;
case 55:return 23
break;
case 56:return  'TRUE'
break;
case 57:return 65
break;
case 58:return 41
break;
case 59:return 43
break;
case 60:return 38
break;
case 61:return 39
break;
case 62:return 30
break;
case 63:return ','
break;
case 64:return 20
break;
case 65:return 31
break;
case 66:return 24
break;
case 67:return 25
break;
case 68:return '.'
break;
case 69:return 61
break;
case 70:return 62
break;
case 71:return 29
break;
case 72:return 'BOOLEANO'
break;
case 73:return 5
break;
case 74:errores.addError(new nodoError("Lexico","Caracter desconocido",yy_.yylloc.first_line, yy_.yylloc.first_column, yy_.yytext))
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:(\\))/,/^(?:(\\))/,/^(?:(\\))/,/^(?:(\\\\))/,/^(?:(\\'))/,/^(?:(\\"))/,/^(?:(("[^"]*")))/,/^(?:(('[^']*')\/\/.*[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]))/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:Array\b)/,/^(?:\*\*)/,/^(?:--)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:function\b)/,/^(?:console\.log\b)/,/^(?:graficar_ts\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:=)/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:([0-9]+))/,/^(?:([0-9]+\.[0-9]+))/,/^(?:(([a-zA-Z_])[a-zA-Z0-9_]*))/,/^(?:{booleano})/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ejecutar;
exports.Parser = ejecutar.Parser;
exports.parse = function () { return ejecutar.parse.apply(ejecutar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}